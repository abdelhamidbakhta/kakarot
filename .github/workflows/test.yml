name: TESTS

on: [push, pull_request_target]

jobs:
  compilation-tests:
    runs-on: ubuntu-latest
    env:
      CI_COMMIT_MESSAGE: CI Formatting Auto Commit
      CI_COMMIT_AUTHOR: ${{ github.event.repository.name }} CI
    steps:
      - uses: actions/checkout@v3

      # Set environment variables based on the last commit
      - name: Set environment variable "commit-message"
        run: echo "commit-message=$(git log -1 --pretty=format:'%s')" >> $GITHUB_ENV
      - name: Display environment variable "commit-message"
        run: echo "commit-message=${{ env.commit-message }}"
      - name: Set environment variable "commit-author"
        run: echo "commit-author=$(git log -1 --pretty=format:'%an')" >> $GITHUB_ENV
      - name: Display environment variable "commit-author"
        run: echo "commit-author=${{ env.commit-author }}"
      - name: Set environment variable "is-auto-commit"
        if: env.commit-message == env.CI_COMMIT_MESSAGE && env.commit-author == env.CI_COMMIT_AUTHOR
        run: echo "is-auto-commit=true" >> $GITHUB_ENV
      - name: Display environment variable "is-auto-commit"
        run: echo "is-auto-commit=${{ env.is-auto-commit }}"

      # Python setup
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Load cached Poetry installation
        uses: actions/cache@v3
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-0 # increment to reset cache
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key:
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make setup

      # Build artifacts
      - name: Format all the cairo files and commit
        # Don't run again on already pushed auto commit. Don't run on pull request events.
        if: env.is-auto-commit == false && ${{ github.event_name }} != 'pull_request'
        run: |
          make format
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "sayajin-labs@users.noreply.github.com"
          git add -A
          git diff-index --quiet HEAD || git commit -m "${{ env.CI_COMMIT_MESSAGE }}" && git push
      - name: Compile all the cairo files
        run: make build

  python-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Load cached Poetry installation
        uses: actions/cache@v3
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-0 # increment to reset cache
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key:
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make setup
      - name: Run tests
        run: make test-no-log
      - name: Upload coverage report to codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage/
      - name: Store performance artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./coverage/
          name: coverage

  resources-tests:
    runs-on: ubuntu-latest
    needs: python-tests
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Load cached Poetry installation
        uses: actions/cache@v3
        with:
          path: ~/.local # the path depends on the OS
          key: poetry-0 # increment to reset cache
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key:
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make setup
      - name: Load performance artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage
      - name: Check resources evolution
        run: GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} make check-resources
