name: TESTS

on: [push, pull_request]
env:
  KEY_POETRY_CACHE: poetry-20230210 # use new date to reset poetry cache
  PATH_POETRY_CACHE: ~/.local # depends on the OS

jobs:
  setup:
    runs-on: self-hosted
    container: ptisserand/kakarot-builder:latest
    env:
      CI_COMMIT_MESSAGE: CI Formatting Auto Commit
      CI_COMMIT_AUTHOR: ${{ github.event.repository.name }} CI
    steps:
      - uses: actions/checkout@v3
      - name: Load cached Poetry installation
        id: cache-poetry
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_POETRY_CACHE }}
          key: ${{ env.KEY_POETRY_CACHE }}
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key:
            self-hosted-venv-${{ runner.os }}-${{
            hashFiles('**/poetry.lock')}}-1
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make setup
      - name: Format all the cairo files
        run: make format
      - name: Commit changes
        # Run on push events and commit only when there are changes, otherwise it continues
        if: github.event_name == 'push'
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "sayajin-labs@users.noreply.github.com"
          git add -A
          git diff-index --quiet HEAD || (git commit -m "${{ env.CI_COMMIT_MESSAGE }}" && git push)

  compilation-tests:
    runs-on: self-hosted
    container: ptisserand/kakarot-builder:latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - name: Load cached Poetry installation
        id: cache-poetry
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_POETRY_CACHE }}
          key: ${{ env.KEY_POETRY_CACHE }}
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key:
            self-hosted-venv-${{ runner.os }}-${{
            hashFiles('**/poetry.lock')}}-1
      # Build artifacts
      - name: Compile all the cairo files
        run: |
          make format-check
          make build
      - name: Upload build result
        uses: actions/upload-artifact@v3
        with:
          path: ./build
          name: build

  python-tests:
    runs-on: self-hosted
    container: ptisserand/kakarot-builder:latest
    needs: compilation-tests
    strategy:
      matrix:
        test_rule: [test-unit-no-log, test-integration-no-log]
    steps:
      - uses: actions/checkout@v3
      - name: Load cached Poetry installation
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_POETRY_CACHE }}
          key: ${{ env.KEY_POETRY_CACHE }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key:
            self-hosted-venv-${{ runner.os }}-${{
            hashFiles('**/poetry.lock')}}-1
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make setup
      - name: Restore build directory
        uses: actions/download-artifact@v3
        with:
          path: ./build
          name: build
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - name: Run test ${{ matrix.test_rule }}
        run: make ${{ matrix.test_rule }}
      - name: Upload coverage report to codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage/
      - name: Store performance artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./coverage/
          name: 'coverage-${{ matrix.test_rule }}'

  resources-tests:
    runs-on: self-hosted
    container: ptisserand/kakarot-builder:latest
    needs: python-tests
    steps:
      - uses: actions/checkout@v3
      - name: Load cached Poetry installation
        uses: actions/cache@v3
        with:
          path: ${{ env.PATH_POETRY_CACHE }}
          key: ${{ env.KEY_POETRY_CACHE }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key:
            self-hosted-venv-${{ runner.os }}-${{
            hashFiles('**/poetry.lock')}}-1
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: make setup
      - name: Load performance artifacts
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage
      - name: Check resources evolution
        run: GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} make check-resources
