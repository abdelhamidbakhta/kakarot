"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getTrunkVersion", {
    enumerable: true,
    get: function() {
        return getTrunkVersion;
    }
});
var _nodefs = /*#__PURE__*/ _interop_require_wildcard(require("node:fs"));
var _nodepath = /*#__PURE__*/ _interop_require_wildcard(require("node:path"));
var _yaml = /*#__PURE__*/ _interop_require_wildcard(require("yaml"));
var _platform = require("./platform.js");
var _user_error = require("./user_error.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var INVALID_CLI_VERSION_ERROR = "Invalid .trunk/trunk.yaml, no cli version found. See https://docs.trunk.io for more info.";
var QUERY_LATEST_ERROR = "Failed to detect latest trunk version. See https://docs.trunk.io for more info.";
var LATEST_URL = "https://trunk.io/releases/latest";
/** Try to get the version from trunk.yaml. */ var tryGetTrunkVersion = function() {
    var _ref = _async_to_generator(function() {
        var currentDir, trunkYamlPath, _trunkConfig_cli, _trunkConfig_cli_sha256, _trunkConfig_cli1, trunkConfig, _, version, sha, _e, _err;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    if (process.env.TRUNK_CLI_VERSION) {
                        return [
                            2,
                            {
                                version: process.env.TRUNK_CLI_VERSION,
                                sha: undefined
                            }
                        ];
                    }
                    currentDir = process.cwd();
                    _state.label = 1;
                case 1:
                    if (!(currentDir !== "/" && !currentDir.endsWith(":\\"))) return [
                        3,
                        11
                    ];
                    trunkYamlPath = _nodepath.resolve(currentDir, ".trunk/trunk.yaml");
                    _state.label = 2;
                case 2:
                    _state.trys.push([
                        2,
                        9,
                        ,
                        10
                    ]);
                    // Desired behavior to search for trunk.yaml
                    /* eslint-disable no-await-in-loop */ return [
                        4,
                        _nodefs.promises.access(trunkYamlPath, _nodefs.constants.F_OK)
                    ];
                case 3:
                    _state.sent();
                    _state.label = 4;
                case 4:
                    _state.trys.push([
                        4,
                        7,
                        ,
                        8
                    ]);
                    _ = _yaml.parse;
                    return [
                        4,
                        _nodefs.promises.readFile(trunkYamlPath, "utf8")
                    ];
                case 5:
                    return [
                        4,
                        _.apply(_yaml, [
                            _state.sent().toString(),
                            {
                                // Allow for non-unique keys, since this is something we allow in the binary. Usually we "accept last".
                                uniqueKeys: false
                            }
                        ])
                    ];
                case 6:
                    trunkConfig = _state.sent();
                    /* eslint-enable no-await-in-loop */ version = trunkConfig === null || trunkConfig === void 0 ? void 0 : (_trunkConfig_cli = trunkConfig.cli) === null || _trunkConfig_cli === void 0 ? void 0 : _trunkConfig_cli.version;
                    sha = trunkConfig === null || trunkConfig === void 0 ? void 0 : (_trunkConfig_cli1 = trunkConfig.cli) === null || _trunkConfig_cli1 === void 0 ? void 0 : (_trunkConfig_cli_sha256 = _trunkConfig_cli1.sha256) === null || _trunkConfig_cli_sha256 === void 0 ? void 0 : _trunkConfig_cli_sha256[_platform.PLATFORM_UNDERSCORE];
                    if (version) {
                        return [
                            2,
                            {
                                version: version,
                                sha: sha
                            }
                        ];
                    }
                    return [
                        3,
                        8
                    ];
                case 7:
                    _e = _state.sent();
                    return [
                        3,
                        8
                    ];
                case 8:
                    throw new _user_error.UserError(INVALID_CLI_VERSION_ERROR);
                case 9:
                    _err = _state.sent();
                    currentDir = _nodepath.dirname(currentDir);
                    return [
                        3,
                        1
                    ];
                case 10:
                    return [
                        3,
                        1
                    ];
                case 11:
                    return [
                        2,
                        {}
                    ];
            }
        });
    });
    return function tryGetTrunkVersion() {
        return _ref.apply(this, arguments);
    };
}();
/** Get the latest available version of trunk. */ var getLatestTrunkVersion = function() {
    var _ref = _async_to_generator(function() {
        var response, responseBody, _releaseInfo_sha256, releaseInfo, version, sha;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        fetch(LATEST_URL)
                    ];
                case 1:
                    response = _state.sent();
                    if (!response.ok) {
                        throw new _user_error.UserError("Failed to query latest trunk version. Got ".concat(response.status, ". Please reach out at https://slack.trunk.io for support."));
                    }
                    return [
                        4,
                        response.text()
                    ];
                case 2:
                    responseBody = _state.sent();
                    try {
                        ;
                        releaseInfo = _yaml.parse(responseBody);
                        version = releaseInfo === null || releaseInfo === void 0 ? void 0 : releaseInfo.version;
                        sha = releaseInfo === null || releaseInfo === void 0 ? void 0 : (_releaseInfo_sha256 = releaseInfo.sha256) === null || _releaseInfo_sha256 === void 0 ? void 0 : _releaseInfo_sha256[_platform.PLATFORM_UNDERSCORE];
                        if (version && sha) {
                            return [
                                2,
                                {
                                    version: version,
                                    sha: sha
                                }
                            ];
                        }
                    } catch (_e) {
                    // noop
                    }
                    throw new _user_error.UserError(QUERY_LATEST_ERROR);
            }
        });
    });
    return function getLatestTrunkVersion() {
        return _ref.apply(this, arguments);
    };
}();
var getTrunkVersion = function() {
    var _ref = _async_to_generator(function() {
        var parsedVersion;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        tryGetTrunkVersion()
                    ];
                case 1:
                    parsedVersion = _state.sent();
                    if (parsedVersion.version) {
                        return [
                            2,
                            parsedVersion
                        ];
                    }
                    return [
                        4,
                        getLatestTrunkVersion()
                    ];
                case 2:
                    return [
                        2,
                        _state.sent()
                    ];
            }
        });
    });
    return function getTrunkVersion() {
        return _ref.apply(this, arguments);
    };
}();

//# sourceMappingURL=version.js.map