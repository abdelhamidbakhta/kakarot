"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EXECUTABLE_NAME: function() {
        return EXECUTABLE_NAME;
    },
    PLATFORM: function() {
        return PLATFORM;
    },
    PLATFORM_UNDERSCORE: function() {
        return PLATFORM_UNDERSCORE;
    },
    checkPlatform: function() {
        return checkPlatform;
    }
});
var _nodechild_process = /*#__PURE__*/ _interop_require_wildcard(require("node:child_process"));
var _semver = /*#__PURE__*/ _interop_require_wildcard(require("semver"));
var _user_error = require("./user_error.js");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
var INVALID_PLATFORM_ERROR = "Trunk is only supported on Linux (x64_64, arm64), MacOS (x86_64, arm64), and Windows (x86_64). See https://docs.trunk.io for more info.";
var KERNEL = function() {
    if (process.platform === "win32") {
        return "mingw";
    }
    if (process.platform === "darwin") {
        return "darwin";
    }
    return "linux";
}();
var MACHINE = function() {
    if (process.arch === "x64") {
        return "x86_64";
    }
    if (process.arch === "arm") {
        return "arm64";
    }
    return process.arch;
}();
var EXECUTABLE_NAME = process.platform === "win32" ? "trunk.exe" : "trunk";
var PLATFORM = "".concat(KERNEL, "-").concat(MACHINE);
var PLATFORM_UNDERSCORE = "".concat(KERNEL, "_").concat(MACHINE);
var MINIMUM_MACOS_VERSION = new _semver.SemVer("10.15.0");
var checkPlatform = function() {
    if (PLATFORM === "linux-x86_64" || PLATFORM === "linux-arm64" || PLATFORM === "mingw-x86_64") {
        return;
    }
    if (PLATFORM === "darwin-x86_64" || PLATFORM === "darwin-arm64") {
        var osxVersion = _nodechild_process.execSync("sw_vers -productVersion").toString().trim();
        var osxSemver = _semver.coerce(osxVersion);
        if (osxSemver && _semver.gte(osxSemver, MINIMUM_MACOS_VERSION)) {
            return;
        }
        throw new _user_error.UserError("Trunk requires at least MacOS ".concat(MINIMUM_MACOS_VERSION.raw, " (yours is ").concat(osxVersion, "). See https://docs.trunk.io for more info."));
    }
    throw new _user_error.UserError(INVALID_PLATFORM_ERROR);
};

//# sourceMappingURL=platform.js.map