"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    TOOL_TMPDIR: function() {
        return TOOL_TMPDIR;
    },
    downloadTrunk: function() {
        return downloadTrunk;
    },
    getInstallDir: function() {
        return getInstallDir;
    }
});
var _nodecrypto = /*#__PURE__*/ _interop_require_wildcard(require("node:crypto"));
var _nodefs = /*#__PURE__*/ _interop_require_wildcard(require("node:fs"));
var _nodeos = /*#__PURE__*/ _interop_require_wildcard(require("node:os"));
var _nodepath = /*#__PURE__*/ _interop_require_wildcard(require("node:path"));
var _nodestream = require("node:stream");
var _tar = /*#__PURE__*/ _interop_require_wildcard(require("tar"));
var _platform = require("./platform.js");
var _user_error = require("./user_error.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var DOWNLOAD_FAILURE_ERROR = "Failed to download trunk binary. Please reach out at https://slack.trunk.io for support.";
var DOWNLOAD_CHECKSUM_ERROR = "Downloaded trunk binary does not match expected checksum. Please reach out at https://slack.trunk.io for support.";
var TRUNK_CACHE = function() {
    if (process.env.TRUNK_CACHE) {
        var trunkCache = process.env.TRUNK_CACHE;
        if (_nodepath.isAbsolute(trunkCache)) {
            return trunkCache;
        }
        return _nodepath.resolve(process.cwd(), trunkCache);
    }
    if (process.env.XDG_CACHE_HOME) {
        return _nodepath.resolve(process.env.XDG_CACHE_HOME, "trunk");
    }
    return _nodepath.resolve(_nodeos.homedir(), ".cache/trunk");
}();
var CLI_DIR = _nodepath.resolve(TRUNK_CACHE, "cli");
_nodefs.mkdirSync(CLI_DIR, {
    recursive: true
});
var TOOL_TMPDIR = _nodefs.mkdtempSync(_nodepath.resolve(CLI_DIR, "tmp."));
var getInstallDir = function(version) {
    if (process.platform === "win32") {
        var localApplicationData = _nodepath.resolve(process.env.LOCALAPPDATA || "", "trunk", "cli");
        return _nodepath.resolve(localApplicationData, "trunk-".concat(version, "-windows"));
    }
    var TOOL_PART = "".concat(version, "-").concat(_platform.PLATFORM);
    return _nodepath.resolve(CLI_DIR, TOOL_PART);
};
/** Get the temporary directory to install to. Caller must create and delete it. */ var getTempInstallDir = function(version) {
    // These temporary install locations match our powershell and bash launchers, respectively.
    if (process.platform === "win32") {
        var localApplicationData = _nodepath.resolve(process.env.LOCALAPPDATA || "", "trunk", "cli");
        return _nodepath.resolve(localApplicationData, "trunk-".concat(version, "-windows"));
    }
    return _nodepath.resolve(TOOL_TMPDIR, "launcher/install");
};
/** Compute the download URL for the CLI binary. */ var getDownloadUrl = function(version) {
    if (process.platform === "win32") {
        // Use the mingw instead of the Windows release so we can use tar to extract
        return "https://trunk.io/releases/".concat(version, "/trunk-").concat(version, ".mingw.tar.gz");
    }
    return "https://trunk.io/releases/".concat(version, "/trunk-").concat(version, "-").concat(_platform.PLATFORM, ".tar.gz");
};
var downloadTrunk = function() {
    var _ref = _async_to_generator(function(version, installDir, expectedSha) {
        var tempInstallDir, downloadUrl, uniqueId, downloadPath, destinationPath, downloadedCLIBuffer, shaSum, digest;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    tempInstallDir = getTempInstallDir(version);
                    return [
                        4,
                        _nodefs.promises.mkdir(tempInstallDir, {
                            recursive: true
                        })
                    ];
                case 1:
                    _state.sent();
                    return [
                        4,
                        _nodefs.promises.mkdir(installDir, {
                            recursive: true
                        })
                    ];
                case 2:
                    _state.sent();
                    downloadUrl = getDownloadUrl(version);
                    uniqueId = _nodecrypto.randomBytes(16).toString("hex");
                    downloadPath = "".concat(tempInstallDir, ".").concat(uniqueId, ".tar.gz");
                    destinationPath = "".concat(tempInstallDir, ".").concat(uniqueId);
                    _state.label = 3;
                case 3:
                    _state.trys.push([
                        3,
                        ,
                        11,
                        15
                    ]);
                    return [
                        4,
                        _async_to_generator(function() {
                            var writeStream, writeableStream, response;
                            return _ts_generator(this, function(_state) {
                                switch(_state.label){
                                    case 0:
                                        writeStream = _nodefs.createWriteStream(downloadPath);
                                        writeableStream = _nodestream.Writable.toWeb(writeStream);
                                        return [
                                            4,
                                            global.fetch(downloadUrl)
                                        ];
                                    case 1:
                                        response = _state.sent();
                                        if (!(!response.ok || !response.body)) return [
                                            3,
                                            3
                                        ];
                                        return [
                                            4,
                                            _nodefs.promises.unlink(downloadPath).catch(function() {})
                                        ];
                                    case 2:
                                        _state.sent();
                                        throw new _user_error.UserError("".concat(DOWNLOAD_FAILURE_ERROR, " (HTTP ").concat(response.status, " ").concat(response.statusText, ")"));
                                    case 3:
                                        return [
                                            4,
                                            response.body.pipeTo(writeableStream)
                                        ];
                                    case 4:
                                        _state.sent();
                                        return [
                                            2
                                        ];
                                }
                            });
                        })()
                    ];
                case 4:
                    _state.sent();
                    if (!expectedSha) return [
                        3,
                        6
                    ];
                    return [
                        4,
                        _nodefs.promises.readFile(downloadPath)
                    ];
                case 5:
                    downloadedCLIBuffer = _state.sent();
                    shaSum = _nodecrypto.createHash("sha256");
                    shaSum.update(downloadedCLIBuffer);
                    digest = shaSum.digest("hex");
                    if (expectedSha !== digest) {
                        throw new _user_error.UserError(DOWNLOAD_CHECKSUM_ERROR);
                    }
                    _state.label = 6;
                case 6:
                    return [
                        4,
                        _nodefs.promises.mkdir(destinationPath)
                    ];
                case 7:
                    _state.sent();
                    return [
                        4,
                        _tar.x({
                            file: downloadPath,
                            cwd: destinationPath,
                            strip: 1
                        })
                    ];
                case 8:
                    _state.sent();
                    return [
                        4,
                        _nodefs.promises.rm(tempInstallDir, {
                            recursive: true,
                            force: true
                        }).catch(function() {})
                    ];
                case 9:
                    _state.sent();
                    return [
                        4,
                        _nodefs.promises.rename(destinationPath, installDir)
                    ];
                case 10:
                    _state.sent();
                    return [
                        3,
                        15
                    ];
                case 11:
                    // Cleanup.
                    return [
                        4,
                        _nodefs.promises.unlink(downloadPath).catch(function() {})
                    ];
                case 12:
                    _state.sent();
                    return [
                        4,
                        _nodefs.promises.rm(destinationPath, {
                            recursive: true,
                            force: true
                        }).catch(function() {})
                    ];
                case 13:
                    _state.sent();
                    return [
                        4,
                        _nodefs.promises.rm(TOOL_TMPDIR, {
                            recursive: true,
                            force: true
                        }).catch(function() {})
                    ];
                case 14:
                    _state.sent();
                    return [
                        7
                    ];
                case 15:
                    return [
                        2
                    ];
            }
        });
    });
    return function downloadTrunk(version, installDir, expectedSha) {
        return _ref.apply(this, arguments);
    };
}();

//# sourceMappingURL=download.js.map