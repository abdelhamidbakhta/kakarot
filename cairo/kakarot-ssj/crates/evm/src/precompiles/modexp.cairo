use core::circuit::CircuitElement as CE;
use core::circuit::CircuitInput as CI;
use core::circuit::{
    u384, circuit_add, circuit_sub, circuit_mul, EvalCircuitTrait, CircuitOutputsTrait,
    CircuitModulus, CircuitInputs, AddInputResultTrait
};
use core::cmp::{min, max};
use core::num::traits::Bounded;
use core::num::traits::Zero;
use core::starknet::EthAddress;

use crate::errors::EVMError;
use crate::precompiles::Precompile;

use utils::traits::bytes::{U8SpanExTrait, FromBytes, ToBytes};
use utils::traits::integer::BitsUsed;

const MAX_INPUT_BYTE_SIZE: usize = 48; // Supports input up to 384 bits
const HEADER_LENGTH: usize = 96;
const MIN_GAS: u64 = 200;

pub impl ModExp of Precompile {
    fn address() -> EthAddress {
        0x5.try_into().unwrap()
    }

    fn exec(input: Span<u8>) -> Result<(u64, Span<u8>), EVMError> {
        // The format of input is:
        // <length_of_BASE> <length_of_EXPONENT> <length_of_MODULUS> <BASE> <EXPONENT> <MODULUS>
        // Where every length is a 32-byte left-padded integer representing the number of bytes
        // to be taken up by the next value

        // safe unwraps, since we will always get a 32 byte span
        let base_len: u256 = input.slice_right_padded(0, 32).from_be_bytes().unwrap();
        let exp_len: u256 = input.slice_right_padded(32, 32).from_be_bytes().unwrap();
        let mod_len: u256 = input.slice_right_padded(64, 32).from_be_bytes().unwrap();

        // cast base_len, exp_len , modulus_len to usize, it does not make sense to handle larger
        // values
        let base_len: usize = match base_len.try_into() {
            Option::Some(base_len) => { base_len },
            Option::None => {
                return Result::Err(EVMError::InvalidParameter('base_len casting to u32 failed'));
            }
        };
        let exp_len: usize = match exp_len.try_into() {
            Option::Some(exp_len) => { exp_len },
            Option::None => {
                return Result::Err(EVMError::InvalidParameter('exp_len casting to u32 failed'));
            }
        };
        let mod_len: usize = match mod_len.try_into() {
            Option::Some(mod_len) => { mod_len },
            Option::None => {
                return Result::Err(EVMError::InvalidParameter('mod_len casting to u32 failed'));
            }
        };

        // We only support inputs up to 48 bytes. We can early return with an empty span if any size
        // is larger than that.
        if base_len > MAX_INPUT_BYTE_SIZE
            || exp_len > MAX_INPUT_BYTE_SIZE
            || mod_len > MAX_INPUT_BYTE_SIZE {
            return Result::Ok((MIN_GAS, [].span()));
        }

        // Handle a special case when both the base and mod length is zero
        if base_len == 0 && mod_len == 0 {
            return Result::Ok((MIN_GAS, [].span()));
        }

        // Used to extract ADJUSTED_EXPONENT_LENGTH.
        let exp_start = HEADER_LENGTH + base_len;
        let exp_head = input
            .slice_right_padded(exp_start, min(32, exp_len))
            .from_be_bytes_partial()
            .expect('exp_head parsing failed');

        let gas = calc_gas(base_len.into(), exp_len.into(), mod_len.into(), exp_head);

        // OPERATION

        // Padding is needed if the input does not contain all 3 values.
        let mod_start_idx = exp_start + exp_len;
        let base = input
            .slice_right_padded(HEADER_LENGTH, base_len)
            .pad_left_with_zeroes(MAX_INPUT_BYTE_SIZE);
        let exponent = input
            .slice_right_padded(exp_start, exp_len)
            .pad_left_with_zeroes(MAX_INPUT_BYTE_SIZE);
        let modulus = input
            .slice_right_padded(mod_start_idx, mod_len)
            .pad_left_with_zeroes(MAX_INPUT_BYTE_SIZE);

        // inputs are guaranteed to be 48 bytes by the previous checks. safe unwraps.
        let base: u384 = base.from_be_bytes().unwrap();
        let exponent: u384 = exponent.from_be_bytes().unwrap();
        let modulus: u384 = modulus.from_be_bytes().unwrap();

        let output = modexp_circuit(base, exponent, modulus);
        let limb0_128: u128 = Into::<_, felt252>::into(output.limb0).try_into().unwrap();
        let limb1_128: u128 = Into::<_, felt252>::into(output.limb1).try_into().unwrap();
        let limb2_128: u128 = Into::<_, felt252>::into(output.limb2).try_into().unwrap();
        let limb3_128: u128 = Into::<_, felt252>::into(output.limb3).try_into().unwrap();

        let mut result_bytes = array![];
        if mod_len > 12 * 3 {
            result_bytes
                .append_span(limb3_128.to_be_bytes().pad_left_with_zeroes(mod_len - 12 * 3));
            result_bytes.append_span(limb2_128.to_be_bytes().pad_left_with_zeroes(12));
            result_bytes.append_span(limb1_128.to_be_bytes().pad_left_with_zeroes(12));
            result_bytes.append_span(limb0_128.to_be_bytes().pad_left_with_zeroes(12));
        } else if mod_len > 12 * 2 {
            result_bytes
                .append_span(limb2_128.to_be_bytes().pad_left_with_zeroes(mod_len - 12 * 2));
            result_bytes.append_span(limb1_128.to_be_bytes().pad_left_with_zeroes(12));
            result_bytes.append_span(limb0_128.to_be_bytes().pad_left_with_zeroes(12));
        } else if mod_len > 12 * 1 {
            result_bytes
                .append_span(limb1_128.to_be_bytes().pad_left_with_zeroes(mod_len - 12 * 1));
            result_bytes.append_span(limb0_128.to_be_bytes().pad_left_with_zeroes(12));
        } else {
            result_bytes.append_span(limb0_128.to_be_bytes().pad_left_with_zeroes(mod_len));
        }

        Result::Ok((gas.into(), result_bytes.span()))
    }
}


fn mod_exp_loop_inner(n: u384, bit: u384, base: u384, res: u384) -> (u384, u384) {
    let (_one, _base, _bit, _res) = (
        CE::<CI<0>> {}, CE::<CI<1>> {}, CE::<CI<2>> {}, CE::<CI<3>> {}
    );

    // Circuit
    // base_if_bit_else_one = (1 - bit)*(one) + bit*base
    // new_res = res * base_if_bit_else_one
    // new_base = base * base
    let base_if_bit_else_one = circuit_add(
        circuit_mul(circuit_sub(_one, _bit), _one), circuit_mul(_bit, _base)
    );
    let new_res = circuit_mul(base_if_bit_else_one, _res);
    let new_base = circuit_mul(_base, _base);

    let modulus = TryInto::<_, CircuitModulus>::try_into([n.limb0, n.limb1, n.limb2, n.limb3])
        .unwrap();

    let mut circuit_inputs = (new_res, new_base,).new_inputs();
    // Fill inputs:
    circuit_inputs = circuit_inputs.next([1, 0, 0, 0]);
    circuit_inputs = circuit_inputs.next(base);
    circuit_inputs = circuit_inputs.next(bit);
    circuit_inputs = circuit_inputs.next(res);

    let outputs = circuit_inputs.done().eval(modulus).unwrap();
    (outputs.get_output(new_res), outputs.get_output(new_base))
}

/// Computes the modular exponentiation x^y mod n up to 384 bits.
/// The algorithm uses the binary expansion of the exponent from right to left,
/// and use iterated squaring-and-multiply implemented using a circuit.
/// Resource: <https://en.wikipedia.org/wiki/Modular_exponentiation#Right-to-left-binary-method>
///
/// # Arguments
///
/// * `x` a `u384` value representing the base.
/// * `y` a `u384` value representing the exponent.
/// * `n` a `u384` value representing the modulus.
///
/// # Returns
///
/// * `u384` - The result of the modular exponentiation x^y mod n.
pub fn modexp_circuit(x: u384, y: u384, n: u384) -> u384 {
    if n.is_zero() || n == 1.into() {
        return 0.into();
    }
    if y.is_zero() {
        return 1.into();
    }
    if x.is_zero() {
        return 0.into();
    }

    let bits = get_u384_bits_little(y);
    let mut res = 1.into();
    let mut base = x;
    for bit in bits {
        let (_res, _base) = mod_exp_loop_inner(n, bit.into(), base, res);
        res = _res;
        base = _base;
    };

    res
}


// Returns the bits of the 384 bit integer in little endian format.
fn get_u384_bits_little(s: u384) -> Array<felt252> {
    let mut bits = array![];
    let mut s_limb0: u128 = Into::<_, felt252>::into(s.limb0).try_into().unwrap();
    while s_limb0 != 0 {
        let (q, r) = core::traits::DivRem::div_rem(s_limb0, 2);
        bits.append(r.into());
        s_limb0 = q;
    };
    let mut s_limb1: u128 = Into::<_, felt252>::into(s.limb1).try_into().unwrap();
    if s_limb1 != 0 {
        while bits.len() != 96 {
            bits.append(0);
        }
    }
    while s_limb1 != 0 {
        let (q, r) = core::traits::DivRem::div_rem(s_limb1, 2);
        bits.append(r.into());
        s_limb1 = q;
    };
    let mut s_limb2: u128 = Into::<_, felt252>::into(s.limb2).try_into().unwrap();
    if s_limb2 != 0 {
        while bits.len() != 192 {
            bits.append(0);
        }
    }
    while s_limb2 != 0 {
        let (q, r) = core::traits::DivRem::div_rem(s_limb2, 2);
        bits.append(r.into());
        s_limb2 = q;
    };
    let mut s_limb3: u128 = Into::<_, felt252>::into(s.limb3).try_into().unwrap();
    if s_limb3 != 0 {
        while bits.len() != 288 {
            bits.append(0);
        }
    }
    while s_limb3 != 0 {
        let (q, r) = core::traits::DivRem::div_rem(s_limb3, 2);
        bits.append(r.into());
        s_limb3 = q;
    };
    bits
}

// Calculate gas cost according to EIP 2565:
// https://eips.ethereum.org/EIPS/eip-2565
fn calc_gas(base_length: u64, exp_length: u64, mod_length: u64, exp_head: u256) -> u64 {
    let multiplication_complexity = calculate_multiplication_complexity(base_length, mod_length);
    let iteration_count = calculate_iteration_count(exp_length, exp_head);
    let gas = (multiplication_complexity * iteration_count.into()) / 3;
    let gas: u64 = gas.try_into().unwrap_or(Bounded::<u64>::MAX);

    max(gas, MIN_GAS)
}

fn calculate_multiplication_complexity(base_length: u64, mod_length: u64) -> u256 {
    let max_length = max(base_length, mod_length);

    let (words, rem) = DivRem::div_rem(max_length, 8);

    let words: u256 = if rem != 0 {
        (words + 1).into()
    } else {
        words.into()
    };

    words * words
}

fn calculate_iteration_count(exp_length: u64, exp_head: u256) -> u64 {
    let mut iteration_count: u64 = if exp_length < 33 {
        if exp_head == 0 {
            0
        } else {
            (exp_head.bits_used() - 1).into()
        }
    } else {
        let length_part = 8 * (exp_length - 32);
        let bits_part = if exp_head != 0 {
            exp_head.bits_used() - 1
        } else {
            0
        };

        length_part + bits_part.into()
    };

    max(iteration_count, 1)
}

#[cfg(test)]
mod tests {
    use core::circuit::u384;
    use core::result::ResultTrait;

    use crate::precompiles::modexp::ModExp;
    use crate::test_data::test_data_modexp::{
        test_modexp_modsize0_returndatasizeFiller_data,
        test_modexp_create2callPrecompiles_test0_berlin_data, test_modexp_eip198_example_1_data,
        test_modexp_eip198_example_2_data, test_modexp_nagydani_1_square_data,
        test_modexp_nagydani_1_qube_data
    };
    use super::modexp_circuit;
    use utils::traits::bytes::{U8SpanExTrait, ToBytes};

    const TWO_31: u256 = 2147483648;
    const PREV_PRIME_384: u384 =
        u384 {
            limb0: 0xfffffffffffffffffffffec3,
            limb1: 0xffffffffffffffffffffffff,
            limb2: 0xffffffffffffffffffffffff,
            limb3: 0xffffffffffffffffffffffff
        };
    const PREV_PRIME_384_M1: u384 =
        u384 {
            limb0: 0xfffffffffffffffffffffec2,
            limb1: 0xffffffffffffffffffffffff,
            limb2: 0xffffffffffffffffffffffff,
            limb3: 0xffffffffffffffffffffffff
        };
    const PREV_PRIME_384_M2: u384 =
        u384 {
            limb0: 0xfffffffffffffffffffffec1,
            limb1: 0xffffffffffffffffffffffff,
            limb2: 0xffffffffffffffffffffffff,
            limb3: 0xffffffffffffffffffffffff
        };

    #[test]
    fn test_modexp_circuit() {
        let TWO_31_M1: u384 = 2147483647.into();
        let TWO_31_M2: u384 = 2147483646.into();
        assert_eq!(modexp_circuit(2.into(), TWO_31_M2, TWO_31_M1), 1.into(), "wrong result");
        assert_eq!(modexp_circuit(3.into(), TWO_31_M2, TWO_31_M1), 1.into(), "wrong result");
        assert_eq!(modexp_circuit(5.into(), TWO_31_M2, TWO_31_M1), 1.into(), "wrong result");
        assert_eq!(modexp_circuit(7.into(), TWO_31_M2, TWO_31_M1), 1.into(), "wrong result");
        assert_eq!(modexp_circuit(11.into(), TWO_31_M2, TWO_31_M1), 1.into(), "wrong result");
        assert_eq!(modexp_circuit(2.into(), TWO_31_M2, TWO_31_M1.into()), 1.into(), "wrong result");
        assert_eq!(modexp_circuit(2.into(), 5.into(), 30.into()), 2.into(), "wrong result");
        assert_eq!(
            modexp_circuit(
                123456789.into(), 987654321.into(), 11111111111111111111111111111111.into()
            ),
            6929919895158922141640454333396.into(),
            "wrong result"
        );
    }

    #[test]
    fn test_modexp_circuit_worst_case() {
        assert_eq!(
            modexp_circuit(PREV_PRIME_384_M2, PREV_PRIME_384_M1, PREV_PRIME_384),
            1.into(),
            "wrong result"
        );
    }

    #[test]
    fn test_modexp_edge_case_circuit() {
        assert_eq!(modexp_circuit(12.into(), 42.into(), 0.into()), 0.into());
        assert_eq!(modexp_circuit(12.into(), 42.into(), 1.into()), 0.into());
        assert_eq!(modexp_circuit(0.into(), 42.into(), 42.into()), 0.into());
        assert_eq!(modexp_circuit(42.into(), 0.into(), 42.into()), 1.into());
        assert_eq!(modexp_circuit(0.into(), 0.into(), 42.into()), 1.into());
    }

    #[test]
    fn test_modexp_precompile_input_output_worst() {
        let mut calldata = array![];
        let l0f: u128 = Into::<_, felt252>::into(PREV_PRIME_384_M2.limb0).try_into().unwrap();
        let l1f: u128 = Into::<_, felt252>::into(PREV_PRIME_384_M2.limb1).try_into().unwrap();
        let size = array![48_u8].span().pad_left_with_zeroes(32);
        calldata.append_span(size);
        calldata.append_span(size);
        calldata.append_span(size);

        calldata.append_span(l1f.to_be_bytes());
        calldata.append_span(l1f.to_be_bytes());
        calldata.append_span(l1f.to_be_bytes());
        calldata.append_span(l0f.to_be_bytes());

        calldata.append_span(l1f.to_be_bytes());
        calldata.append_span(l1f.to_be_bytes());
        calldata.append_span(l1f.to_be_bytes());
        calldata.append_span((l0f + 1).to_be_bytes());

        calldata.append_span(l1f.to_be_bytes());
        calldata.append_span(l1f.to_be_bytes());
        calldata.append_span(l1f.to_be_bytes());
        calldata.append_span((l0f + 2).to_be_bytes());

        let (gas, result) = ModExp::exec(calldata.span()).unwrap();
        let expected_result = array![1].span().pad_left_with_zeroes(48);
        let expected_gas = 4596;
        assert_eq!(result, expected_result);
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_precompile_size_gt_48_should_return_empty() {
        let mut calldata = array![];
        let size = array![49_u8].span().pad_left_with_zeroes(32);
        calldata.append_span(size);
        calldata.append_span(size);
        calldata.append_span(size);

        let (gas, result) = ModExp::exec(calldata.span()).unwrap();
        let expected_result = [].span();
        let expected_gas = 200;
        assert_eq!(result, expected_result);
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_precompile_base_and_exp_zero_should_return_empty() {
        let mut calldata = array![];
        let size_zero = array![0].span().pad_left_with_zeroes(32);
        let size_not_zero = array![48].span().pad_left_with_zeroes(32);

        calldata.append_span(size_zero);
        calldata.append_span(size_not_zero);
        calldata.append_span(size_zero);

        let (gas, result) = ModExp::exec(calldata.span()).unwrap();
        let expected_result = [].span();
        let expected_gas = 200;
        assert_eq!(result, expected_result);
        assert_eq!(gas, expected_gas);
    }

    // To test all input sizes, we use the fact that:
    // For prime p, a^(p-1) mod p = 1, for all a. (Fermat's little theorem)
    // Using prime_deltas we get a prime_i = 256^(i+2) + prime_deltas[i] of size i+2 bytes.
    // We can then use p = prime_i and a = p - 2 and expect the result to be 1 with padding
    #[test]
    fn test_modexp_precompile_input_output_all_sizes() {
        #[cairofmt::skip]
        let prime_deltas = array![7_u16, 3, 43, 15, 15, 21, 81, 13, 15, 13, 7, 61, 111, 25, 451,
        51, 85, 175, 253, 7, 87, 427, 27, 133, 235, 375, 423, 735, 357, 115, 81, 297, 175,
         57, 45, 127, 61, 37, 91, 27, 15, 241, 231, 55, 105, 127, 115];

        let mut size = 2_u32;
        for delta in prime_deltas {
            let mut modulus: Array<u8> = array![];
            modulus.append(1);
            for _i in 2..size - 1 {
                modulus.append(0);
            };
            if size > 2 {
                modulus.append((delta.into() / 256_u16).try_into().unwrap());
            }
            modulus.append((delta % 256).try_into().unwrap());

            let mut base: Array<u8> = Default::default();
            let delta_base = delta - 2;
            base.append(1);
            for _i in 2..size - 1 {
                base.append(0);
            };
            if size > 2 {
                base.append((delta_base.into() / 256_u16).try_into().unwrap());
            }
            base.append((delta_base % 256).try_into().unwrap());

            let delta_exponent = delta - 1;
            let mut exponent: Array<u8> = Default::default();
            exponent.append(1);
            for _i in 2..size - 1 {
                exponent.append(0);
            };
            if size > 2 {
                exponent.append((delta_exponent.into() / 256_u16).try_into().unwrap());
            }
            exponent.append((delta_exponent % 256).try_into().unwrap());

            let size_bytes = size.to_be_bytes().pad_left_with_zeroes(32);
            let mut calldata = array![];
            calldata.append_span(size_bytes);
            calldata.append_span(size_bytes);
            calldata.append_span(size_bytes);
            calldata.append_span(base.span());
            calldata.append_span(exponent.span());
            calldata.append_span(modulus.span());

            let (_, result) = ModExp::exec(calldata.span()).unwrap();
            let expected_result_bytes = 1_u8.to_be_bytes();

            assert_eq!(result, expected_result_bytes.pad_left_with_zeroes(size));

            size = size + 1;
        }
    }

    #[test]
    fn test_modexp_eip198_example_1() {
        let (calldata, expected) = test_modexp_eip198_example_1_data();
        let expected_gas = 1_360;
        let (gas, result) = ModExp::exec(calldata).unwrap();
        assert_eq!(result, expected);
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_eip198_example_2() {
        let (calldata, expected) = test_modexp_eip198_example_2_data();
        let expected_gas = 1_360;
        let (gas, result) = ModExp::exec(calldata).unwrap();
        assert_eq!(result, expected);
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_berlin_empty_input() {
        let calldata = [].span();
        let expected = [].span();
        let expected_gas = 200;
        let (gas, result) = ModExp::exec(calldata).unwrap();
        assert_eq!(result, expected);
        assert_eq!(gas, expected_gas);
    }


    #[test]
    fn test_modexp_matching_lengths_0_0_0__46700b4d40ac5c35af2c22dda2787a91eb567b06() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_208_127_73__814f1a960abe05e4d6d4e8ca70936225d9eef8df() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x99, 0x76, 0xd3, 0x10, 0xc2, 0xd6, 0xd6, 0x12, 0x28, 0x86, 0x07, 0x03, 0xef, 0x5e, 0x44, 0x3f, 0x2b, 0x67, 0x70, 0x7c, 0x0f, 0xd9, 0x06, 0xa4, 0x4d, 0xa2, 0xfb, 0x0c, 0x1f, 0x3e, 0x1e, 0xa5, 0x88, 0xcc, 0x04, 0x1d, 0xc7, 0xfa, 0x54, 0x4f, 0xf8, 0x0d, 0xfe, 0x17, 0x54, 0xac, 0x08, 0x0c, 0x9d, 0x2b, 0x83, 0x73, 0x59, 0x73, 0x5f, 0x1e, 0x9f, 0x83, 0x43, 0xa3, 0xc4, 0xb7, 0xe5, 0xa8, 0xb1, 0xe7, 0x74, 0x31, 0x90, 0xaf, 0x93, 0x31, 0x29, 0x08, 0x24, 0x06, 0x24, 0x1c, 0x56, 0x80, 0xf5, 0xc8, 0xd4, 0xca, 0x7b, 0x19, 0x3e, 0x6b, 0x0f, 0xa6, 0x20, 0x50, 0x30, 0xc5, 0xc5, 0xed, 0xfb, 0xb2, 0x5e, 0xa4, 0xaf, 0x0a, 0xd8, 0x50, 0x9a, 0xee, 0x10, 0x12, 0x12, 0xe3, 0x1a, 0xa7, 0xd9, 0x23, 0xe1, 0x60, 0xe0, 0xf7, 0x1b, 0x23, 0xcf, 0x03, 0x5e, 0xad, 0xe8, 0x2b, 0xbe, 0x67, 0x9a, 0x8c, 0x9a, 0x17, 0xae, 0x49, 0x2a, 0x2b, 0xfc, 0x3d, 0xd9, 0x53, 0xee, 0xd2, 0x64, 0x34, 0x13, 0x4c, 0x84, 0x74, 0xf1, 0x64, 0x60, 0xb0, 0xf3, 0x1f, 0x56, 0x74, 0x2e, 0x25, 0xac, 0x6d, 0x6f, 0x8a, 0xba, 0xdf, 0x99, 0x5a, 0x5d, 0x81, 0xb7, 0xa7, 0x6e, 0x7f, 0x16, 0x17, 0xe5, 0x9f, 0xb1, 0x3f, 0x10, 0x27, 0xe5, 0x8c, 0x56, 0x31, 0x36, 0x35, 0x84, 0x53, 0xbc, 0xd8, 0xfe, 0x19, 0x8a, 0x7d, 0x15, 0x30, 0x66, 0x82, 0xca, 0xf4, 0xaa, 0x33, 0x69, 0x31, 0x19, 0x06, 0xe2, 0x25, 0x54, 0x17, 0xe8, 0xb4, 0x2f, 0xc6, 0xfe, 0x8a, 0x2b, 0xe3, 0x94, 0xb2, 0xca, 0x2c, 0x82, 0x1b, 0xe6, 0x8a, 0x3b, 0x1d, 0xf0, 0xc1, 0xf7, 0x02, 0x87, 0x0f, 0xa1, 0x69, 0x1a, 0xbd, 0xa8, 0xca, 0x76, 0xf7, 0x4e, 0x10, 0x4a, 0x49, 0x5f, 0x73, 0x8e, 0x73, 0xc7, 0x95, 0x11, 0x92, 0xbb, 0x67, 0xeb, 0xa0, 0x35, 0x24, 0xb9, 0xa6, 0xd1, 0x3f, 0xd8, 0x65, 0x58, 0x1c, 0x09, 0x32, 0xcd, 0xf1, 0xe6, 0x6a, 0x1c, 0x5d, 0xee, 0x27, 0x90, 0x9c, 0x83, 0x5d, 0xc1, 0xc9, 0x58, 0xf8, 0xcf, 0x81, 0xe2, 0x8f, 0x9b, 0x1f, 0x2a, 0xb2, 0x4a, 0x9f, 0x41, 0xb2, 0x53, 0x06, 0xcf, 0x2d, 0xcf, 0xb8, 0x41, 0xd7, 0x08, 0xb9, 0xf6, 0x52, 0x52, 0x48, 0xef, 0x30, 0xe3, 0xeb, 0xb2, 0x24, 0x1e, 0x73, 0xd3, 0xe5, 0x0d, 0x82, 0xc3, 0xad, 0x3c, 0x86, 0xee, 0x4c, 0xbf, 0x1d, 0x92, 0xc1, 0x5c];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_208_127_73__da04fe98cda8a8abf5d049aefbd3b5d11689b91f() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x99, 0x76, 0xd3, 0x10, 0xc2, 0xd6, 0xd6, 0x12, 0x28, 0x86, 0x07, 0x03, 0xef, 0x5e, 0x44, 0x3f, 0x2b, 0x67, 0x70, 0x7c, 0x0f, 0xd9, 0x06, 0xa4, 0x4d, 0xa2, 0xfb, 0x0c, 0x1f, 0x3e, 0x1e, 0xa5, 0x88, 0xcc, 0x04, 0x1d, 0xc7, 0xfa, 0x54, 0x4f, 0xf8, 0x0d, 0xfe, 0x17, 0x54, 0xac, 0x08, 0x0c, 0x9d, 0x2b, 0x83, 0x73, 0x59, 0x73, 0x5f, 0x1e, 0x9f, 0x83, 0x43, 0xa3, 0xc4, 0xb7, 0xe5, 0xa8, 0xb1, 0xe7, 0x74, 0x31, 0x90, 0xaf, 0x93, 0x31, 0x29, 0x08, 0x24, 0x06, 0x24, 0x1c, 0x56, 0x80, 0xf5, 0xc8, 0xd4, 0xca, 0x7b, 0x19, 0x3e, 0x6b, 0x0f, 0xa6, 0x20, 0x50, 0x30, 0xc5, 0xc5, 0xed, 0xfb, 0xb2, 0x5e, 0xa4, 0xaf, 0x0a, 0xd8, 0x50, 0x9a, 0xee, 0x10, 0x12, 0x12, 0xe3, 0x1a, 0xa7, 0xd9, 0x23, 0xe1, 0x60, 0xe0, 0xf7, 0x1b, 0x23, 0xcf, 0x03, 0x5e, 0xad, 0xe8, 0x2b, 0xbe, 0x67, 0x9a, 0x8c, 0x9a, 0x17, 0xae, 0x49, 0x2a, 0x2b, 0xfc, 0x3d, 0xd9, 0x53, 0xee, 0xd2, 0x64, 0x34, 0x13, 0x4c, 0x84, 0x74, 0xf1, 0x64, 0x60, 0xb0, 0xf3, 0x1f, 0x56, 0x74, 0x2e, 0x25, 0xac, 0x6d, 0x6f, 0x8a, 0xba, 0xdf, 0x99, 0x5a, 0x5d, 0x81, 0xb7, 0xa7, 0x6e, 0x7f, 0x16, 0x17, 0xe5, 0x9f, 0xb1, 0x3f, 0x10, 0x27, 0xe5, 0x8c, 0x56, 0x31, 0x36, 0x35, 0x84, 0x53, 0xbc, 0xd8, 0xfe, 0x19, 0x8a, 0x7d, 0x15, 0x30, 0x66, 0x82, 0xca, 0xf4, 0xaa, 0x33, 0x69, 0x31, 0x19, 0x06, 0xe2, 0x25, 0x54, 0x17, 0xe8, 0xb4, 0x2f, 0xc6, 0xfe, 0x8a, 0x2b, 0xe3, 0x94, 0xb2, 0xca, 0x2c, 0x82, 0x1b, 0xe6, 0x8a, 0x3b, 0x1d, 0xf0, 0xc1, 0xf7, 0x02, 0x87, 0x0f, 0xa1, 0x69, 0x1a, 0xbd, 0xa8, 0xca, 0x76, 0xf7, 0x4e, 0x10, 0x4a, 0x49, 0x5f, 0x73, 0x8e, 0x73, 0xc7, 0x95, 0x11, 0x92, 0xbb, 0x67, 0xeb, 0xa0, 0x35, 0x24, 0xb9, 0xa6, 0x2b, 0xfc, 0x3d, 0xd9, 0x53, 0xee, 0xd2, 0x64, 0x34, 0x13, 0x4c, 0x84, 0x74, 0xf1, 0x64, 0x60, 0xb0, 0xf3, 0x1f, 0x56, 0x74, 0x2e, 0x25, 0xac, 0x6d, 0x6f, 0x8a, 0xba, 0xdf, 0x99, 0x5a, 0x5d, 0x81, 0xb7, 0xa7, 0x6e, 0x7f, 0x16, 0x17, 0xe5, 0x9f, 0xb1, 0x3f, 0x10, 0x27, 0xe5, 0x8c, 0x56, 0x31, 0x36, 0x35, 0x84, 0x53, 0xbc, 0xd8, 0xfe, 0x19, 0x8a, 0x7d, 0x15, 0x30, 0x66, 0x82, 0xca, 0xf4, 0xaa, 0x33, 0x69, 0x31, 0x19, 0x06, 0xe2, 0x25];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_208_127_73__bf72ecd64668ff6fe81da43ff3c70bd701386219() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x99, 0x76, 0xd3, 0x10, 0xc2, 0xd6, 0xd6, 0x12, 0x28, 0x86, 0x07, 0x03, 0xef, 0x5e, 0x44, 0x3f, 0x2b, 0x67, 0x70, 0x7c, 0x0f, 0xd9, 0x06, 0xa4, 0x4d, 0xa2, 0xfb, 0x0c, 0x1f, 0x3e, 0x1e, 0xa5, 0x88, 0xcc, 0x04, 0x1d, 0xc7, 0xfa, 0x54, 0x4f, 0xf8, 0x0d, 0xfe, 0x17, 0x54, 0xac, 0x08, 0x0c, 0x9d, 0x2b, 0x83, 0x73, 0x59, 0x73, 0x5f, 0x1e, 0x9f, 0x83, 0x43, 0xa3, 0xc4, 0xb7, 0xe5, 0xa8, 0xb1, 0xe7, 0x74, 0x31, 0x90, 0xaf, 0x93, 0x31, 0x29, 0x08, 0x24, 0x06, 0x24, 0x1c, 0x56, 0x80, 0xf5, 0xc8, 0xd4, 0xca, 0x7b, 0x19, 0x3e, 0x6b, 0x0f, 0xa6, 0x20, 0x50, 0x30, 0xc5, 0xc5, 0xed, 0xfb, 0xb2, 0x5e, 0xa4, 0xaf, 0x0a, 0xd8, 0x50, 0x9a, 0xee, 0x10, 0x12, 0x12, 0xe3, 0x1a, 0xa7, 0xd9, 0x23, 0xe1, 0x60, 0xe0, 0xf7, 0x1b, 0x23, 0xcf, 0x03, 0x5e, 0xad, 0xe8, 0x2b, 0xbe, 0x67, 0x9a, 0x8c, 0x9a, 0x17, 0xae, 0x49, 0x2a, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x99, 0x76, 0xd3, 0x10, 0xc2, 0xd6, 0xd6, 0x12, 0x28, 0x86, 0x07, 0x03, 0xef, 0x5e, 0x44, 0x3f, 0x2b, 0x67, 0x70, 0x7c, 0x0f, 0xd9, 0x06, 0xa4, 0x4d, 0xa2, 0xfb, 0x0c, 0x1f, 0x3e, 0x1e, 0xa5, 0x88, 0xcc, 0x04, 0x1d, 0xc7, 0xfa, 0x54, 0x4f, 0xf8, 0x0d, 0xfe, 0x17, 0x54, 0xac, 0x08, 0x0c, 0x9d, 0x2b, 0x83, 0x73, 0x59, 0x73, 0x5f, 0x1e, 0x9f, 0x83, 0x43, 0xa3, 0xc4, 0xb7, 0xe5, 0xa8, 0xb1, 0xe7, 0x74, 0x31, 0x90, 0xaf, 0x93, 0x31, 0x29, 0x08, 0x24, 0x06, 0x24, 0x1c, 0x56, 0x80, 0xf5, 0xc8, 0xd4, 0xca, 0x7b, 0x19, 0x3e, 0x6b, 0x0f, 0xa6, 0x20, 0x50, 0x30, 0xc5, 0xc5, 0xed, 0xfb, 0xb2, 0x5e, 0xa4, 0xaf, 0x0a, 0xd8, 0x50, 0x9a, 0xee, 0x10, 0x12, 0x12, 0xe3, 0x1a, 0xa7, 0xd9, 0x23, 0xe1, 0x60, 0xe0, 0xf7, 0x1b, 0x23, 0xcf, 0x03, 0x5e, 0xad, 0xe8, 0x2b, 0xbe];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_208_127_73__22657468fd95b062e41ea469154eab35aef94c79() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x99, 0x76, 0xd3, 0x10, 0xc2, 0xd6, 0xd6, 0x12, 0x28, 0x86, 0x07, 0x03, 0xef, 0x5e, 0x44, 0x3f, 0x2b, 0x67, 0x70, 0x7c, 0x0f, 0xd9, 0x06, 0xa4, 0x4d, 0xa2, 0xfb, 0x0c, 0x1f, 0x3e, 0x1e, 0xa5, 0x88, 0xcc, 0x04, 0x1d, 0xc7, 0xfa, 0x54, 0x4f, 0xf8, 0x0d, 0xfe, 0x17, 0x54, 0xac, 0x08, 0x0c, 0x9d, 0x2b, 0x83, 0x73, 0x59, 0x73, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x99, 0x76, 0xd3, 0x10, 0xc2, 0xd6, 0xd6, 0x12, 0x28, 0x86, 0x07, 0x03, 0xef, 0x5e, 0x44, 0x3f, 0x2b, 0x67, 0x70, 0x7c, 0x0f, 0xd9, 0x06, 0xa4, 0x4d, 0xa2, 0xfb, 0x0c, 0x1f, 0x3e, 0x1e, 0xa5, 0x88, 0xcc, 0x04, 0x1d, 0xc7, 0xfa, 0x54, 0x4f, 0xf8, 0x0d, 0xfe, 0x17, 0x54, 0xac, 0x08, 0x0c, 0x9d, 0x2b, 0x83, 0x73, 0x59, 0x73, 0x5f, 0x1e, 0x9f, 0x83, 0x43, 0xa3, 0xc4, 0xb7, 0xe5, 0xa8, 0xb1, 0xe7, 0x74, 0x31, 0x90, 0xaf, 0x93, 0x31, 0x29, 0x08, 0x24, 0x06, 0x24, 0x1c, 0x56, 0x80, 0xf5, 0xc8, 0xd4, 0xca, 0x7b, 0x19, 0x3e, 0x6b, 0x0f, 0xa6, 0x20, 0x50, 0x30, 0xc5, 0xc5, 0xed, 0xfb, 0xb2, 0x5e, 0xa4, 0xaf, 0x0a, 0xd8, 0x50, 0x9a, 0xee, 0x10, 0x12, 0x12, 0xe3, 0x1a, 0xa7, 0xd9, 0x23, 0xe1, 0x60, 0xe0, 0xf7, 0x1b, 0x23, 0xcf, 0x03, 0x5e, 0xad, 0xe8, 0x2b, 0xbe, 0xa6, 0x28, 0x31, 0x71, 0xeb, 0xdf, 0xdf, 0x8e, 0x1f, 0xdb, 0x37, 0xac, 0xf7, 0x4b, 0xd0, 0xe1, 0x60, 0x4a, 0xba, 0xe6, 0xfb, 0x40, 0x00, 0xa5, 0x22, 0x62, 0xd0, 0xcb, 0x6b, 0xdc, 0xa8, 0xb5, 0x11, 0x23, 0x96, 0xbb, 0x48, 0xb9, 0x07, 0x5b, 0x86, 0x35, 0x47, 0xa7, 0x64, 0x83, 0x7b, 0xbe, 0x4e, 0x72, 0x83, 0x37, 0x31, 0x6a, 0xc4, 0xf7, 0x70, 0x9b, 0x31, 0x31, 0x56, 0x6a, 0x56, 0xd3, 0xc6, 0xdd, 0x9a, 0xad, 0x34, 0x7a, 0x8e, 0x44, 0x4d, 0x3a, 0xd3, 0xbc, 0x6f, 0xa7, 0x82, 0x69, 0xff];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_208_127_73__635e8630c5beeb937ae2ecd38f87b29beace3338() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x99, 0x76, 0xd3, 0x10, 0xc2, 0xd6, 0xd6, 0x12, 0x28, 0x86, 0x07, 0x03, 0xef, 0x5e, 0x44, 0x3f, 0x2b, 0x67, 0x70, 0x7c, 0x0f, 0xd9, 0x06, 0xa4, 0x4d, 0xa2, 0xfb, 0x0c, 0x1f, 0x3e, 0x1e, 0xa5, 0x88, 0xcc, 0x04, 0x1d, 0xc7, 0xfa, 0x54, 0x4f, 0xf8, 0x0d, 0xfe, 0x17, 0x54, 0xac, 0x08, 0x0c, 0x9d, 0x2b, 0x83, 0x73, 0x59, 0x73, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x99, 0x76, 0xd3, 0x10, 0xc2, 0xd6, 0xd6, 0x12, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x99, 0x76, 0xd3, 0x10, 0xc2, 0xd6, 0xd6, 0x12, 0x28, 0x86, 0x07, 0x03, 0xef, 0x5e, 0x44, 0x3f, 0x2b, 0x67, 0x70, 0x7c, 0x0f, 0xd9, 0x06, 0xa4, 0x4d, 0xa2, 0xfb, 0x0c, 0x1f, 0x3e, 0x1e, 0xa5, 0x88, 0xcc, 0x04, 0x1d, 0xc7, 0xfa, 0x54, 0x4f, 0xf8, 0x0d, 0xfe, 0x17, 0x54, 0xac, 0x08, 0x0c, 0x9d, 0x2b, 0x83, 0x73, 0x59, 0x73, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_208_127_73__05d340bee6ae6ec235c80af0eff9da9167f80c56() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x99, 0x76, 0xd3, 0x10, 0xc2, 0xd6, 0xd6, 0x12, 0x28, 0x86, 0x07, 0x03, 0xef, 0x5e, 0x44, 0x3f, 0x2b, 0x67, 0x70, 0x7c, 0x0f, 0xd9, 0x06, 0xa4, 0x4d, 0xa2, 0xfb, 0x0c, 0x1f, 0x3e, 0x1e, 0xa5, 0x88, 0xcc, 0x04, 0x1d, 0xc7, 0xfa, 0x54, 0x4f, 0xf8, 0x0d, 0xfe, 0x17, 0x54, 0xac, 0x08, 0x0c, 0x9d, 0x2b, 0x83, 0x73, 0x59, 0x73, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x30, 0x7b, 0xbf, 0x31, 0xd9, 0xe2, 0x3a, 0xe4, 0xae, 0x4e, 0x5b, 0x26, 0xc4, 0xd1, 0x62, 0xfc, 0x6a, 0xa8, 0x9c, 0x01, 0x3b, 0x6a, 0xc6, 0x82, 0x28, 0x15, 0x0e, 0xed, 0x6e, 0x02, 0x50, 0x7c, 0x8d, 0xa8, 0xd0, 0x49, 0x0d, 0x74, 0x0c, 0x49, 0x13, 0xd0, 0x16, 0x02, 0xca, 0xe8, 0x55, 0xdc, 0xd9, 0xe1, 0x33, 0x46, 0x3c, 0x55, 0x41, 0x5e, 0xa0, 0x75, 0x8f, 0xa2, 0x1a, 0xf5, 0xac, 0x91, 0x2f, 0x00, 0x6e, 0x04, 0x77, 0x6d, 0x08, 0x2a, 0x54, 0x4e, 0xc0, 0xfe, 0x93, 0xfb, 0xb0, 0x08, 0x81, 0x2e, 0x1f, 0x2a, 0xd9, 0xc9, 0xd8, 0x3b, 0x01, 0x36, 0xf1, 0xf1, 0xcd, 0x2b, 0xd7, 0x52, 0x47, 0xec, 0xb7, 0xcd, 0xeb, 0x12, 0x46, 0xfb, 0x80, 0x7b, 0xd7, 0xf6, 0x2f, 0x2f, 0x9a, 0x59, 0xea, 0x6e, 0x10, 0xf0, 0x77, 0x50, 0x5d, 0x0d, 0x8e, 0x5d, 0x0e, 0x4e, 0x70, 0x8d, 0xc6, 0x88, 0xbc, 0x38, 0x68, 0xdc, 0xc9, 0xbb, 0x71];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_208_256_255__cb5db23c040b31aaf324c66e01fded28eeecd6cc() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x93, 0x00, 0x49, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x99, 0x76, 0xd3, 0x10, 0xc2, 0xd6, 0xd6, 0x12, 0x28, 0x86, 0x07, 0x03, 0xef, 0x5e, 0x44, 0x3f, 0x2b, 0x67, 0x70, 0x7c, 0x0f, 0xd9, 0x06, 0xa4, 0x4d, 0xa2, 0xfb, 0x0c, 0x1f, 0x3e, 0x1e, 0xa5, 0x88, 0xcc, 0x04, 0x1d, 0xc7, 0xfa, 0x54, 0x4f, 0xf8, 0x0d, 0xfe, 0x17, 0x54, 0xac, 0x08, 0x0c, 0x9d, 0x2b, 0x83, 0x73, 0x59, 0x73, 0x25, 0xc3, 0x45, 0x9a, 0xf9, 0xb3, 0xb0, 0x61, 0x73, 0x68, 0xf1, 0x17, 0xf2, 0xc5, 0x39, 0xdd, 0x6a, 0xb5, 0x32, 0x5c, 0x52, 0x68, 0x04, 0xf9, 0x94, 0xee, 0xa9, 0xa8, 0x5e, 0x35, 0x15, 0x25, 0xee, 0x89, 0x40, 0x3e, 0x4b, 0xe3, 0xd7, 0x08, 0xde, 0x28, 0x18, 0xb3, 0x03, 0x4d, 0xf0, 0x39, 0x45, 0xa0, 0x91, 0xc4, 0x5a, 0xcf, 0x6a, 0x34, 0x79, 0xe8, 0x0d, 0x92, 0xb5, 0x0f, 0x00, 0xf0, 0xcd, 0xe7, 0x49, 0xe4, 0xa4, 0x4e, 0x16, 0x09, 0xda, 0x30, 0x7b, 0xbf, 0x31, 0xd9, 0xe2, 0x3a, 0xe4, 0xae, 0x4e, 0x5b, 0x26, 0xc4, 0xd1, 0x62, 0xfc, 0x6a, 0xa8, 0x9c, 0x01, 0x3b, 0x6a, 0xc6, 0x82, 0x28, 0x15, 0x0e, 0xed, 0x6e, 0x02, 0x50, 0x7c, 0x8d, 0xa8, 0xd0, 0x49, 0x0d, 0x74, 0x0c, 0x49, 0x13, 0xd0, 0x16, 0x02, 0xca, 0xe8, 0x55, 0xdc, 0xd9, 0xe1, 0x33, 0x46, 0x3c, 0x55, 0x41, 0x5e, 0xa0, 0x75, 0x8f, 0xa2, 0x1a, 0xf5, 0xac, 0x91, 0x2f, 0x00, 0x6e, 0x04, 0x77, 0x6d, 0x08, 0x2a, 0x54, 0x4e, 0xc0, 0xfe, 0x93, 0xfb, 0xb0, 0x08, 0x81, 0x2e, 0x1f, 0x2a, 0xd9, 0xc9, 0xd8, 0x3b, 0x01, 0x36, 0xf1, 0xf1, 0xcd, 0x2b, 0xd7, 0x52, 0x47, 0xec, 0xb7, 0xcd, 0xeb, 0x12, 0x46, 0xfb, 0x80, 0x7b, 0xd7, 0xf6, 0x2f, 0x2f, 0x9a, 0x59, 0xea, 0x6e, 0x10, 0xf0, 0x77, 0x50, 0x5d, 0x0d, 0x8e, 0x5d, 0x0e, 0x4e, 0x70, 0x8d, 0xc6, 0x88, 0xbc, 0x38, 0x68, 0xdc, 0xc9, 0xbb, 0x71, 0x07, 0xb9, 0xc4, 0x4e, 0xf3, 0x35, 0x9b, 0x6a, 0xe1, 0x1c, 0xb9, 0xba, 0xc9, 0x58, 0xf4, 0x20, 0xde, 0x1f, 0xac, 0x5f, 0xf3, 0x01, 0x60, 0x90, 0x15, 0xaf, 0x8c, 0x41, 0x2e, 0x33, 0x2c, 0x3a, 0xaa, 0x52, 0xb7, 0x47, 0x43, 0x9a, 0xf1, 0xbe, 0xae, 0xb2, 0x25, 0x09, 0x21, 0xfb, 0x03, 0x47, 0x96, 0x18, 0x7d, 0xc4, 0x54, 0x2a, 0xc7, 0xad, 0xb1, 0xff, 0x80, 0xc7, 0x94, 0xf2, 0x37, 0xf9, 0xd3, 0x71, 0xae, 0x34, 0x89, 0x67, 0x58, 0xd3, 0xc7, 0x9f, 0xdf, 0xa9, 0x85, 0xa9, 0x5a, 0x8f, 0x89, 0x92, 0x53, 0x42, 0x13, 0x68, 0x89, 0x7c, 0x27, 0xb8, 0x81, 0x96, 0x05, 0x23, 0xff, 0x51, 0x5c, 0xeb, 0x50, 0xe5, 0xdf, 0x44, 0x1d, 0xf1, 0x0b, 0x62, 0xf6, 0xe4, 0x59, 0x1b, 0x1b, 0x8e, 0x3e, 0xb0, 0x21, 0x20, 0x93, 0x52, 0x73, 0xfd, 0x16, 0x9a, 0x72, 0xcf, 0xbd, 0xb3, 0xd3, 0x06, 0x04, 0xbe, 0x35, 0xaa, 0xca, 0x61, 0x2f, 0x9b, 0x13, 0x2f, 0x6f, 0x9b, 0x9f, 0xce, 0x20, 0x5a, 0x2f, 0x57, 0xb9, 0x36, 0xed, 0x57, 0x34, 0x02, 0x59, 0x88, 0x93, 0xaf, 0xc4, 0xe5, 0xa7, 0x03, 0xe2, 0x89, 0x0b, 0xee, 0x13, 0x81, 0xaf, 0x23, 0x49, 0x0c, 0x3a, 0x8f, 0xcf, 0xf7, 0xba, 0x71, 0xa9, 0x87, 0x97, 0xd6, 0x11, 0x1d, 0x78, 0xbe, 0x22, 0xa2, 0xae, 0xca, 0x65, 0x29, 0x54, 0xd8, 0xcd, 0x63, 0x79, 0x4c, 0x26, 0xe6, 0x9e, 0x1f, 0xd2, 0xb1, 0x79, 0x0b, 0xdc, 0x88, 0x61, 0xd3, 0xe1, 0x94, 0xc7, 0x3f, 0x77, 0x6c, 0x5c, 0x71, 0xd8, 0x3d, 0x5f, 0x43, 0xd2, 0xf8, 0xe8, 0xa7, 0xd8, 0x0b, 0x40, 0x12, 0x9a, 0x36, 0x0d, 0xd0, 0x99, 0x7e, 0x9c, 0xf8, 0xa1, 0x97, 0x53, 0xe4, 0xc8, 0xbc, 0x2f, 0x61, 0x61, 0x83, 0xd4, 0x98, 0xbe, 0xe1, 0x02, 0x0d, 0xd3, 0xae, 0x19, 0x5e, 0xc7, 0x84, 0x1e, 0x7b, 0xc0, 0x25, 0x16, 0xad, 0xd0, 0xfb, 0xcd, 0x04, 0x55, 0x44, 0x61, 0x60, 0x0f, 0xe3, 0x5f, 0xdd, 0xb8, 0x54, 0x7a, 0xa0, 0x9d, 0x63, 0x3b, 0xc2, 0x87, 0x85, 0xd1, 0x08, 0x0b, 0xd4, 0xaf, 0xd1, 0x8e, 0xfa, 0xdf, 0x8a, 0xa7, 0x69, 0xce, 0x2e, 0x27, 0x44, 0x38, 0xec, 0x6e, 0xf0, 0x73, 0x09];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_54_20_29__558ad5558923dfa64670b744339cd89e3e6ef0b8() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xbf, 0x66, 0x3c, 0x0a, 0x7c, 0x5a, 0x7b, 0x19, 0x03, 0xe4, 0x19, 0x81, 0x49, 0xb5, 0xda, 0xe6, 0x20, 0xbb, 0xd5, 0x62, 0x29, 0x5b, 0xfb, 0x8a, 0x25, 0x48, 0xc0, 0x33, 0x3f, 0x7d, 0x09, 0xd0, 0x8f, 0x02, 0x78, 0xf8, 0x2d, 0x75, 0x57, 0xd1, 0xd0, 0x98, 0x5a, 0x9d, 0xc6, 0x76, 0xa8, 0xc2, 0x0d, 0x29, 0xa4, 0x72, 0x4a, 0x1e, 0x0c, 0x05, 0x70, 0x9a, 0xb3, 0xfa, 0x98, 0x42, 0xec, 0x35, 0xa9, 0x64, 0x01, 0x62, 0x2f, 0x9d, 0xb1, 0x26, 0x56, 0x77, 0x83, 0x87, 0x5a, 0x3e, 0xaf, 0xf6, 0xf9, 0xeb, 0x03, 0xd3, 0xf3, 0xc2, 0x13, 0x83, 0xb9, 0x0b, 0xef, 0x1a, 0x8d, 0xc1, 0x2a, 0x48, 0xd1, 0xe4, 0x6d, 0x9e, 0x5a, 0xa0, 0x43];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_54_20_20__f60d2e331a8ba8d1d644bfe1e9eb50323a33960e() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xbf, 0x66, 0x3c, 0x0a, 0x7c, 0x5a, 0x7b, 0x19, 0x03, 0xe4, 0x19, 0x81, 0x49, 0xb5, 0xda, 0xe6, 0x20, 0xbb, 0xd5, 0x62, 0x29, 0x5b, 0xfb, 0x8a, 0x25, 0x48, 0xc0, 0x33, 0x3f, 0x7d, 0x09, 0xd0, 0x8f, 0x02, 0x78, 0xf8, 0x2d, 0x75, 0x57, 0xd1, 0xd0, 0x98, 0x5a, 0x9d, 0xc6, 0x76, 0xa8, 0xc2, 0x0d, 0x29, 0xa4, 0x72, 0x4a, 0x1e, 0x0c, 0x05, 0x70, 0x9a, 0xb3, 0xfa, 0x98, 0x42, 0xec, 0x35, 0xa9, 0x64, 0x01, 0x62, 0x2f, 0x9d, 0xb1, 0x26, 0x56, 0x77, 0x83, 0x87, 0x5a, 0x3e, 0xaf, 0xf6, 0xf9, 0xeb, 0x03, 0xd3, 0xf3, 0xc2, 0x13, 0x83, 0xb9, 0x0b, 0xef, 0x1a, 0x8d, 0xc1];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_54_20_20__ba4249ec4b86e78d8f94ae13c3ab62869201eac8() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xbf, 0x66, 0x3c, 0x0a, 0x7c, 0x5a, 0x7b, 0x19, 0x03, 0xe4, 0x19, 0x81, 0x49, 0xb5, 0xda, 0xe6, 0x20, 0xbb, 0xd5, 0x62, 0x29, 0x5b, 0xfb, 0x8a, 0x25, 0x48, 0xc0, 0x33, 0x3f, 0x7d, 0x09, 0xd0, 0x8f, 0x02, 0x78, 0xf8, 0x2d, 0x75, 0x57, 0xd1, 0xd0, 0x98, 0x5a, 0x9d, 0xc6, 0x76, 0xa8, 0xc2, 0x0d, 0x29, 0xa4, 0x72, 0x4a, 0x1e, 0x83, 0x87, 0x5a, 0x3e, 0xaf, 0xf6, 0xf9, 0xeb, 0x03, 0xd3, 0xf3, 0xc2, 0x13, 0x83, 0xb9, 0x0b, 0xef, 0x1a, 0x8d, 0xc1, 0x83, 0x87, 0x5a, 0x3e, 0xaf, 0xf6, 0xf9, 0xeb, 0x03, 0xd3, 0xf3, 0xc2, 0x13, 0x83, 0xb9, 0x0b, 0xef, 0x1a, 0x8d, 0xc1];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_54_20_20__c36a475cabef8527b7e8c542bd3aeb57416eb30b() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xbf, 0x66, 0x3c, 0x0a, 0x7c, 0x5a, 0x7b, 0x19, 0x03, 0xe4, 0x19, 0x81, 0x49, 0xb5, 0xda, 0xe6, 0x20, 0xbb, 0xd5, 0x62, 0x29, 0x5b, 0xfb, 0x8a, 0x25, 0x48, 0xc0, 0x33, 0x3f, 0x7d, 0x09, 0xd0, 0x8f, 0x02, 0x78, 0xf8, 0x2d, 0x75, 0x57, 0xd1, 0xd0, 0x98, 0x5a, 0x9d, 0xc6, 0x76, 0xa8, 0xc2, 0x0d, 0x29, 0xa4, 0x72, 0x4a, 0x1e, 0x83, 0x87, 0x5a, 0x3e, 0xaf, 0xf6, 0xf9, 0xeb, 0x03, 0xd3, 0xf3, 0xc2, 0x13, 0x83, 0xb9, 0x0b, 0xef, 0x1a, 0x8d, 0xc1, 0xbf, 0x66, 0x3c, 0x0a, 0x7c, 0x5a, 0x7b, 0x19, 0x03, 0xe4, 0x19, 0x81, 0x49, 0xb5, 0xda, 0xe6, 0x20, 0xbb, 0xd5, 0x62];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_54_20_20__02da4d2a4baf628c97bb3f3e1141f283c31d79c2() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xbf, 0x66, 0x3c, 0x0a, 0x7c, 0x5a, 0x7b, 0x19, 0x03, 0xe4, 0x19, 0x81, 0x49, 0xb5, 0xda, 0xe6, 0x20, 0xbb, 0xd5, 0x62, 0x29, 0x5b, 0xfb, 0x8a, 0x25, 0x48, 0xc0, 0x33, 0x3f, 0x7d, 0x09, 0xd0, 0x8f, 0x02, 0x78, 0xf8, 0x2d, 0x75, 0x57, 0xd1, 0xd0, 0x98, 0x5a, 0x9d, 0xc6, 0x76, 0xa8, 0xc2, 0x0d, 0x29, 0xa4, 0x72, 0x4a, 0x1e, 0xbf, 0x66, 0x3c, 0x0a, 0x7c, 0x5a, 0x7b, 0x19, 0x03, 0xe4, 0x19, 0x81, 0x49, 0xb5, 0xda, 0xe6, 0x20, 0xbb, 0xd5, 0x62, 0x29, 0x5b, 0xfb, 0x8a, 0x25, 0x48, 0xc0, 0x33, 0x3f, 0x7d, 0x09, 0xd0, 0x8f, 0x02, 0x78, 0xf8, 0x2d, 0x75, 0x57, 0xd1];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_54_20_20__cd56d489505bb88148a1dc086654765e1043dca8() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x29, 0x5b, 0xfb, 0x8a, 0x25, 0x48, 0xc0, 0x33, 0x3f, 0x7d, 0x09, 0xd0, 0x8f, 0x02, 0x78, 0xf8, 0x2d, 0x75, 0x57, 0xd1, 0xbf, 0x66, 0x3c, 0x0a, 0x7c, 0x5a, 0x7b, 0x19, 0x03, 0xe4, 0x19, 0x81, 0x49, 0xb5, 0xda, 0xe6, 0x20, 0xbb, 0xd5, 0x62, 0x29, 0x5b, 0xfb, 0x8a, 0x25, 0x48, 0xc0, 0x33, 0x3f, 0x7d, 0x09, 0xd0, 0x8f, 0x02, 0x78, 0xf8, 0x2d, 0x75, 0x57, 0xd1, 0xe9, 0xd5, 0x36, 0xd3, 0xf0, 0x7c, 0x52, 0x77, 0x40, 0x6e, 0xaf, 0x41, 0x33, 0x05, 0x12, 0x47, 0xc3, 0x15, 0x14, 0xdf, 0x31, 0x42, 0x5d, 0xd0, 0xa2, 0xc2, 0xdd, 0xc8, 0x60, 0x2e, 0xb6, 0x65, 0x85, 0x6b];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_256_256_256__c9463b9b33fa2d85d94c043e459f92d90221bd2d() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x14, 0x29, 0x5b, 0xfb, 0x8a, 0x25, 0x48, 0xc0, 0x33, 0x3f, 0x7d, 0x09, 0xd0, 0x8f, 0x02, 0x78, 0xf8, 0x2d, 0x75, 0x57, 0xd1, 0xbf, 0x66, 0x3c, 0x0a, 0x7c, 0x5a, 0x7b, 0x19, 0x03, 0xe4, 0x19, 0x81, 0x49, 0xb5, 0xda, 0xe6, 0x20, 0xbb, 0xd5, 0x62, 0x29, 0x5b, 0xfb, 0x8a, 0x25, 0x48, 0xc0, 0x33, 0x3f, 0x7d, 0x09, 0xd0, 0x8f, 0x02, 0x78, 0xf8, 0x2d, 0x75, 0x57, 0xd1, 0xe9, 0xd5, 0x36, 0xd3, 0xf0, 0x7c, 0x52, 0x77, 0x40, 0x6e, 0xaf, 0x41, 0x33, 0x05, 0x12, 0x47, 0xc3, 0x15, 0x14, 0xdf, 0x31, 0x42, 0x5d, 0xd0, 0xa2, 0xc2, 0xdd, 0xc8, 0x60, 0x2e, 0xb6, 0x65, 0x85, 0x6b, 0x0d, 0x27, 0xa5, 0xb2, 0x1d, 0xab, 0xd5, 0xfc, 0x0e, 0x6b, 0x82, 0x4b, 0x72, 0xba, 0x23, 0x86, 0x08, 0x6a, 0xe7, 0x19, 0x83, 0xac, 0xab, 0x78, 0xb9, 0x5d, 0x57, 0xf7, 0xa6, 0x17, 0x8f, 0x22, 0x72, 0x72, 0x0a, 0x5e, 0xd0, 0xab, 0xd5, 0xde, 0x5b, 0x18, 0x42, 0x72, 0xf0, 0xe6, 0xf8, 0xea, 0xbc, 0x78, 0x3b, 0xe3, 0xdc, 0x9d, 0x60, 0x46, 0x77, 0xac, 0x4f, 0x96, 0x23, 0x6e, 0x61, 0xf2, 0x68, 0xb4, 0xe9, 0x5a, 0xda, 0x91, 0x78, 0x0a, 0xe0, 0x0a, 0x69, 0xd4, 0x4a, 0x42, 0x44, 0xe6, 0x72, 0x66, 0x73, 0xcf, 0xe6, 0xa0, 0x4d, 0xf5, 0xa3, 0x43, 0xd2, 0x19, 0x2b, 0x07, 0x12, 0xd9, 0x17, 0xd5, 0xf0, 0x24, 0x3b, 0xfb, 0xe5, 0x10, 0x18, 0x3d, 0x86, 0x34, 0x84, 0xe2, 0x41, 0x0f, 0x2a, 0x14, 0xe0, 0x6c, 0x01, 0x30, 0x7a, 0x6d, 0xa1, 0x46, 0x48, 0xc7, 0xde, 0xb9, 0xfb, 0x66, 0x21, 0xd6, 0xb1, 0x17, 0x79, 0xd5, 0x13, 0x81, 0x22, 0xb0, 0x83, 0x88, 0xcc, 0x94, 0xf7, 0x35, 0xd8, 0x32, 0x85, 0x51, 0x9a, 0x62, 0x1c, 0x13, 0x3d, 0x86, 0x32, 0x31, 0xde, 0x1b, 0x39, 0x2d, 0x34, 0xb5, 0x03, 0x4f, 0xce, 0xfc, 0xd7, 0xea, 0x22, 0xf4, 0x13, 0xd6, 0xda, 0xd5, 0x78, 0x95, 0x23, 0xe5, 0x9f, 0x9d, 0x53, 0xf0, 0x31, 0x98, 0x7b, 0x19, 0xfc, 0x91, 0xe2, 0x9a, 0x33, 0x33, 0x32, 0x42, 0x61, 0x7d, 0x30, 0xe9, 0xf4, 0xbf, 0xea, 0xfc, 0xa2, 0xe2, 0x6a, 0xf5, 0x25, 0xbe, 0x37, 0xb5, 0xc6, 0xf4, 0xfb, 0x26, 0x85, 0x8b, 0xb6, 0x54, 0x14, 0x7b, 0x5c, 0xc8, 0x8f, 0xd4, 0x6d, 0x4d, 0x70, 0x97, 0xf2, 0x44, 0xc4, 0x24, 0xa4, 0x49, 0x96, 0x6f, 0xd5, 0x06, 0x84, 0xc8, 0xae, 0x6a, 0xfd, 0x60, 0x50, 0x2d, 0x6b, 0xb4, 0x78, 0xce, 0x8d, 0xbb, 0x69, 0xae, 0x96, 0xf3, 0xb4, 0xa8, 0x9c, 0x77, 0xbc, 0xd3, 0xa0, 0x6d, 0xdb, 0x83, 0x13, 0xca, 0xa6, 0x60, 0x24, 0xbd, 0x8a, 0x50, 0xe7, 0x26, 0x80, 0x30, 0x6f, 0xf6, 0xea, 0x9c, 0x66, 0x71, 0x31, 0xad, 0x95, 0x00, 0x38, 0x5b, 0x48, 0x9e, 0x2c, 0x64, 0xbe, 0x32, 0xbb, 0xac, 0xad, 0xd4, 0xd7, 0x31, 0xec, 0xc9, 0x7a, 0x41, 0xf2, 0x74, 0x93, 0xa2, 0x0f, 0x24, 0xdc, 0xb4, 0x31, 0x5c, 0x4e, 0xb3, 0x1c, 0xe3, 0x97, 0x0d, 0x34, 0x01, 0xc1, 0x35, 0x1d, 0x54, 0x75, 0xa7, 0x07, 0x02, 0x83, 0x4d, 0xa1, 0x14, 0xbc, 0x3b, 0xa9, 0x34, 0x1e, 0xb1, 0x5e, 0x0b, 0x60, 0x76, 0xb0, 0x88, 0x0a, 0xa8, 0xb6, 0x7a, 0x4b, 0x04, 0xef, 0x93, 0x71, 0x61, 0x15, 0x13, 0xc4, 0xd6, 0xa3, 0x85, 0x3f, 0xcf, 0x81, 0xbd, 0xee, 0x10, 0x8d, 0x6b, 0xe4, 0xa0, 0x53, 0x03, 0xce, 0x62, 0xfb, 0xcc, 0xfe, 0x2c, 0xb4, 0xcc, 0xcc, 0x08, 0x16, 0xfc, 0x76, 0x37, 0xb7, 0x42, 0x21, 0x9e, 0xa2, 0x1f, 0xac, 0xe2, 0xe9, 0xe8, 0x03, 0x65, 0x76, 0x75, 0x59, 0xcc, 0xc0, 0xaa, 0x46, 0xc5, 0x06, 0x57, 0x30, 0xaa, 0x22, 0x5c, 0x0f, 0x57, 0xe2, 0xaa, 0x35, 0xf0, 0x28, 0xb5, 0x0d, 0xa9, 0x66, 0xc8, 0xf5, 0x53, 0x55, 0x30, 0xbd, 0x48, 0x11, 0x57, 0x97, 0x43, 0x6c, 0xb5, 0xc2, 0x57, 0x08, 0x32, 0x0a, 0xe9, 0xe3, 0xd6, 0x92, 0xaa, 0xd8, 0xfc, 0xd4, 0x70, 0xd5, 0x02, 0x2b, 0x18, 0x36, 0x32, 0xe1, 0x8e, 0xfa, 0x61, 0x67, 0x67, 0x23, 0x97, 0xaf, 0x30, 0xd0, 0x9c, 0xd2, 0x90, 0x99, 0x59, 0x6e, 0x1b, 0xd7, 0x70, 0x14, 0x00, 0xb7, 0x6e, 0x33, 0xfd, 0x56, 0xeb, 0xfa, 0x9a, 0xbc, 0xf4, 0x41, 0x22, 0xcb, 0x32, 0xb3, 0x68, 0xae, 0x1f, 0x7a, 0x4c, 0x0c, 0xe0, 0xac, 0xb1, 0xf0, 0xb5, 0xbf, 0x6f, 0x8f, 0xdf, 0x11, 0xff, 0xd5, 0xb8, 0xaf, 0x05, 0x76, 0xc7, 0x2f, 0x75, 0x0f, 0x9e, 0xe3, 0x37, 0xeb, 0x9d, 0x1f, 0x78, 0x4d, 0xc9, 0x7f, 0xe8, 0xb1, 0xab, 0x3f, 0xea, 0x37, 0xf4, 0x95, 0xf6, 0x3e, 0xd4, 0x02, 0x27, 0x51, 0x38, 0xfb, 0xc0, 0xab, 0xef, 0x97, 0x96, 0xd3, 0xa0, 0x31, 0x94, 0x93, 0x3f, 0xc3, 0x46, 0x34, 0x53, 0x93, 0x1a, 0xe6, 0xcd, 0x47, 0xfe, 0x1a, 0x91, 0xf5, 0xa7, 0x0d, 0xed, 0x6a, 0x68, 0x4a, 0x5b, 0xa5, 0x99, 0x43, 0xde, 0x05, 0x71, 0x5a, 0x2a, 0x5d, 0x40, 0xff, 0x03, 0xd6, 0x8c, 0xeb, 0xa2, 0xb7, 0x7d, 0xfb, 0x07, 0x65, 0xdd, 0x48, 0xf1, 0x3c, 0xaa, 0x30, 0x50, 0x0b, 0x0d, 0xd9, 0x6c, 0x43, 0xc8, 0x2d, 0xe8, 0xeb, 0xcb, 0xb0, 0x41, 0x66, 0x8b, 0x89, 0x4a, 0xa4, 0xf1, 0xc7, 0x1f, 0x46, 0x61, 0x48, 0xc5, 0xbf, 0x87, 0x5f, 0x84, 0x62, 0x23, 0x78, 0xa8, 0xd1, 0x7e, 0x52, 0x15, 0x78, 0xf9, 0x70, 0x0d, 0xec, 0xbd, 0xaa, 0xcf, 0xfe, 0x5e, 0x1a, 0xaa, 0xde, 0x41, 0x68, 0x5f, 0x51, 0x82, 0x9d, 0xd3, 0xd2, 0xd5, 0x1d, 0xd0, 0xa0, 0xd3, 0xfb, 0x24, 0xb5];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_0_0_0__46700b4d40ac5c35af2c22dda2787a91eb567b06() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_246_195_183__9efb845e9115f8acc4b8612c41febc02625d947b() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0xcc, 0x00, 0x68, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_83_8_0__41e19a6a890d5fc92607e4546fe37981fe7bb767() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x97, 0x48, 0xbf, 0x7a, 0x7b, 0xd7, 0xf3, 0x0a, 0x4a, 0x52, 0x43, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_111_131_15__c7d27c6961faaadb48129cd06cd08344b840d6d0() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5e, 0xac, 0x9d, 0xe6, 0x28, 0x4a, 0x9b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_13_213_14__6107c379448db1545d5b585ce29d7860a7c3e198() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x08, 0xfe, 0xdc, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_211_78_240__e6c24eec31e9722b8d22f38b553cde4f0fac77c3() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xfe, 0x07, 0xa4, 0xea, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x08, 0x0e, 0xcd, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_211_78_240__8c1f794427493ed2da577228c234507ac8ec2a98() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x08, 0x0e, 0xcd, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_0_1_78__99dd7847e1ad5ab8092fd05b0f0ca14e4359b466() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_1_1_78__56157b124fab7d30186b06e973a56352375d60e3() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_1_1_78__2f2583849eb516bf39da25ba02eb9775f5e76599() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_112_176_123__4e96cacbacec45c47144dd0ad9f8c35f53289081() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xc8, 0xbe, 0x17, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0xa4, 0x5d, 0x70, 0x6f, 0xf0, 0x98, 0xff, 0x6f, 0x57, 0x67, 0x44, 0x3e, 0xa9, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_112_176_123__ce2aadbd71df763c8b0b0c8132042cc32387531b() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xc8, 0xbe, 0x17, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xbe, 0x17, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0xa4, 0x5d, 0x70, 0x6f, 0xf0, 0x98, 0xff, 0x6f, 0x57, 0x67, 0x44, 0x3e, 0xa9, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_112_176_123__3d1a9ef97d26137981982e2c63cd1a222700c443() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xc8, 0xbe, 0x17, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xbe, 0x17, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0xa4, 0x5d, 0x70, 0x6f, 0xf0, 0x98, 0xff, 0x6f, 0x57, 0x67, 0x44, 0x3e, 0xa9, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_112_176_123__518a70dd0c4d090233dffdfcb8906b9d68d25eb6() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xc8, 0x09, 0x17, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xbe, 0x17, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0xa4, 0x5d, 0x70, 0x6f, 0xf0, 0x98, 0xff, 0x6f, 0x57, 0x67, 0x44, 0x3e, 0xa9, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_112_176_123__82c6d279c036bdb9f2fe05a37e63a105b094d315() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xc8, 0x09, 0x17, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xbe, 0x17, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x63, 0x5d, 0x70, 0x6f, 0xf0, 0x98, 0xff, 0x6f, 0x57, 0x67, 0x44, 0x3e, 0xa9, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_112_176_123__c1ce3f8f4dac6558cc64da88ee337d4737be52ae() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0xc8, 0x09, 0x17, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xbe, 0x17, 0x09, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x63, 0x5d, 0x70, 0x6f, 0xf0, 0x98, 0xff, 0x6f, 0x57, 0x09, 0x44, 0x3e, 0xa9, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_random_inputs_103_85_1__9a562a549d9429a8c7bcb9f6b747b688404e56ff() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xbd, 0x29, 0x7d, 0x6a, 0x00, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b];
        #[cairofmt::skip]
        let expected_result = array![];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_34_42_26() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0xf2, 0x20, 0x77, 0x78, 0x07, 0xcf, 0x25, 0x27, 0x28, 0xc0, 0xdb, 0xcb, 0x28, 0xb8, 0xb9, 0x46, 0x17, 0xbf, 0x9d, 0x6f, 0x21, 0x63, 0x69, 0xfc, 0x55, 0xc5, 0xc0, 0x58, 0x30, 0x1a, 0xfb, 0xf4, 0x5f, 0xed, 0x06, 0x9c, 0xf3, 0x76, 0x29, 0x9e, 0x6d, 0xab, 0x4c, 0xcc, 0xe6, 0xf5, 0xdb, 0xa2, 0x0b, 0x63, 0x00, 0xe9, 0xb8, 0x93, 0x86, 0x5a, 0x2d, 0x7e, 0xce, 0x4e, 0x0f, 0x14, 0xa2, 0x9b, 0xc7, 0x0e, 0x93, 0xcb, 0xd6, 0xa1, 0x11, 0x45, 0x07, 0xe3, 0x43, 0x66, 0x89, 0x2d, 0x89, 0xa3, 0x22, 0x39, 0x52, 0x6f, 0xd6, 0x37, 0x97, 0x24, 0x3c, 0xc1, 0x31, 0x87, 0xfa, 0xb9, 0x45, 0x69, 0xc3, 0x37, 0xe8, 0x07, 0xad, 0x10];
        #[cairofmt::skip]
        let expected_result = array![0x58, 0xed, 0x0c, 0xb6, 0x64, 0x08, 0x53, 0x79, 0xd6, 0x4f, 0x1d, 0x3e, 0x94, 0x91, 0x82, 0x72, 0x5a, 0x71, 0x85, 0x76, 0x14, 0x71, 0xf9, 0x80, 0xbd, 0x99];
        let expected_gas = 2750;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_37_9_17() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x91, 0x2c, 0xc6, 0x81, 0xc6, 0x3f, 0xa8, 0x7d, 0xe6, 0xa2, 0x21, 0xb3, 0x4f, 0x09, 0xae, 0xb7, 0xfe, 0x33, 0x36, 0x3c, 0x6e, 0x59, 0xf3, 0x71, 0x7b, 0xfc, 0x65, 0xb5, 0xa2, 0x30, 0xbc, 0x18, 0x74, 0xd5, 0x7e, 0x4b, 0xcc, 0xb1, 0x09, 0x5c, 0x09, 0x76, 0x4d, 0xc9, 0xc6, 0xca, 0x2a, 0x8e, 0x38, 0x6d, 0x97, 0xab, 0x32, 0x3a, 0x51, 0x0a, 0x34, 0x1c, 0x42, 0xaf, 0x31, 0xeb, 0xc9];
        #[cairofmt::skip]
        let expected_result = array![0x29, 0x8a, 0x84, 0x96, 0x85, 0x7d, 0xa9, 0x7f, 0x27, 0x1e, 0x71, 0xbd, 0x2f, 0xe9, 0x6d, 0x36, 0x1c];
        let expected_gas = 591;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_38_38_34() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0xb1, 0xb0, 0x2d, 0xeb, 0x20, 0x08, 0x01, 0xf6, 0xa2, 0xce, 0x5a, 0x5b, 0x71, 0xf8, 0x91, 0xb4, 0xe4, 0xc7, 0x80, 0x17, 0x05, 0x92, 0x8c, 0x2d, 0x82, 0x6c, 0x89, 0x71, 0xe6, 0xc6, 0x98, 0x8e, 0x80, 0x50, 0xc9, 0xc6, 0xe8, 0xee, 0xa8, 0xeb, 0x53, 0x74, 0x3c, 0xc0, 0x22, 0xb0, 0x57, 0x3d, 0xb7, 0x14, 0x6f, 0x6e, 0x99, 0x5c, 0xad, 0x7d, 0x76, 0xd7, 0x10, 0x63, 0xf2, 0x18, 0x50, 0xd7, 0x6f, 0x8b, 0x24, 0x8d, 0xc3, 0xb1, 0x0a, 0xf8, 0xe2, 0x4f, 0x29, 0x02, 0x3a, 0xb2, 0x38, 0x9f, 0xea, 0x3c, 0xe7, 0x92, 0x09, 0x34, 0xc2, 0x33, 0xa8, 0x9b, 0x8b, 0xc7, 0xc8, 0x16, 0x1e, 0x41, 0xd9, 0xdd, 0xf0, 0x79, 0xcb, 0x90, 0xa0, 0x02, 0x8e, 0x72, 0xe9, 0x4b, 0xea, 0x91];
        #[cairofmt::skip]
        let expected_result = array![0x10, 0x17, 0x22, 0xaf, 0x15, 0x2c, 0x7a, 0x60, 0x83, 0x77, 0x06, 0xf5, 0x48, 0x88, 0xdc, 0xdc, 0x3e, 0x5c, 0x2d, 0x12, 0xcc, 0xb6, 0x87, 0xff, 0x45, 0x13, 0x4f, 0xfb, 0x6e, 0xfe, 0x5d, 0xdf, 0x02, 0xe0];
        let expected_gas = 2525;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_27_47_18() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0xf1, 0x99, 0x5a, 0x3a, 0x18, 0x6b, 0x0e, 0xf5, 0xee, 0xa3, 0x6b, 0x18, 0xfd, 0xaa, 0x94, 0xbe, 0xce, 0x6b, 0xff, 0xbb, 0xb3, 0x1d, 0xb3, 0x66, 0xc2, 0x10, 0xb2, 0xac, 0xc1, 0xe4, 0x4a, 0xaf, 0xad, 0x0b, 0x24, 0x92, 0x2f, 0x62, 0xe6, 0x78, 0x4a, 0xd8, 0x6b, 0x4f, 0x62, 0x0f, 0x5a, 0xae, 0xf5, 0xf2, 0xf1, 0x33, 0x71, 0x46, 0x3d, 0x72, 0xff, 0x31, 0xb4, 0x42, 0xc4, 0x6e, 0x81, 0x2b, 0xec, 0xcc, 0xc8, 0x7c, 0x3a, 0xd8, 0xe3, 0x36, 0x40, 0xca, 0x3a, 0x5e, 0xb6, 0xc0, 0x04, 0xb4, 0x9b, 0x7b, 0x57, 0x96, 0x97, 0xd8, 0xa1, 0xc6, 0xa7, 0xff, 0x65, 0x2d];
        #[cairofmt::skip]
        let expected_result = array![0x2a, 0xd7, 0x0a, 0xa9, 0x34, 0xe3, 0x33, 0xfc, 0xcf, 0xac, 0x75, 0x0d, 0x78, 0x76, 0x38, 0x35, 0x6f, 0x73];
        let expected_gas = 2000;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_25_31_13() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x69, 0x11, 0x20, 0xb4, 0x99, 0x80, 0x42, 0x3c, 0x99, 0x10, 0x4a, 0x1a, 0x56, 0x1c, 0x83, 0xdd, 0xf8, 0x29, 0x05, 0x1c, 0xef, 0xd7, 0xe6, 0x37, 0xa9, 0x0b, 0x8a, 0x2a, 0x53, 0x33, 0x56, 0xc7, 0x67, 0xb1, 0xb0, 0x9e, 0x91, 0x2e, 0x50, 0xbe, 0xdc, 0x0e, 0x6d, 0x8d, 0x68, 0x6b, 0x05, 0x1e, 0x36, 0x98, 0x74, 0xe5, 0x97, 0x09, 0x28, 0x4b, 0x29, 0x4a, 0x40, 0xc8, 0x97, 0x78, 0x5b, 0xc1, 0x59, 0x6f, 0xe2, 0xa0, 0x95];
        #[cairofmt::skip]
        let expected_result = array![0x01, 0x4f, 0xb4, 0xf6, 0xe7, 0x76, 0xcb, 0xe2, 0xb2, 0xb8, 0x95, 0x1e, 0x6f];
        let expected_gas = 1296;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_1_14_31() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x49, 0xc4, 0x0c, 0xa5, 0x96, 0x0e, 0x7f, 0x30, 0xea, 0xac, 0xc7, 0xd8, 0x9f, 0x32, 0xee, 0xdf, 0xff, 0xd1, 0xf9, 0x39, 0x62, 0x1b, 0xa3, 0x0d, 0x53, 0xb9, 0x03, 0x9c, 0xff, 0x29, 0x31, 0xdb, 0x19, 0x96, 0xf0, 0x98, 0x37, 0x28, 0xbb, 0xf7, 0x4d, 0x38, 0x60, 0x4f, 0xcd, 0xdb];
        #[cairofmt::skip]
        let expected_result = array![0xce, 0xd5, 0x48, 0x43, 0xec, 0x5e, 0xc7, 0x9a, 0x5f, 0x00, 0x84, 0xb4, 0xb1, 0xf1, 0xe9, 0xe4, 0x20, 0x86, 0x74, 0x0d, 0x80, 0xe5, 0x8c, 0x69, 0x58, 0xf3, 0x49, 0xa9, 0xaf, 0xe6, 0x0f];
        let expected_gas = 592;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_5_42_10() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x30, 0xd8, 0xda, 0x91, 0xb2, 0x0b, 0xce, 0xb7, 0xcb, 0x99, 0x0d, 0x4e, 0x03, 0xda, 0xa1, 0x80, 0x83, 0x15, 0xb1, 0x92, 0x24, 0x9e, 0x77, 0x03, 0x66, 0x69, 0x4c, 0xcc, 0xf6, 0x2b, 0x51, 0xa8, 0xa4, 0xf9, 0xf8, 0x3a, 0xe9, 0x90, 0x95, 0x2f, 0xb9, 0xd9, 0x05, 0x6e, 0x9d, 0xd7, 0x19, 0x8c, 0x63, 0xfe, 0x47, 0xef, 0x41, 0x66, 0x2f, 0x5c, 0x57];
        #[cairofmt::skip]
        let expected_result = array![0x68, 0x62, 0xe1, 0xd2, 0x29, 0xd7, 0xa1, 0xa9, 0x8e, 0xce];
        let expected_gas = 441;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_22_15_42() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x72, 0xd2, 0xf2, 0x73, 0x21, 0x2e, 0x0c, 0xbe, 0x37, 0x7e, 0x03, 0x9d, 0x3b, 0xcd, 0x1c, 0x98, 0x83, 0x65, 0x0f, 0x0f, 0xc1, 0x3e, 0x31, 0xd2, 0x74, 0x4a, 0x12, 0xad, 0x4f, 0xba, 0xe3, 0x49, 0x14, 0x27, 0xf6, 0x06, 0xbb, 0xf8, 0x30, 0x39, 0xd0, 0x23, 0xdd, 0x70, 0x82, 0xb6, 0x53, 0x9d, 0x14, 0x09, 0x4c, 0x71, 0x89, 0x14, 0xf7, 0x3e, 0xf1, 0x30, 0xbe, 0x0c, 0x91, 0xda, 0xa8, 0x93, 0x36, 0x62, 0xf4, 0x1d, 0x8d, 0xd7, 0xac, 0x4b, 0xa9, 0xc6, 0xfc, 0xd5, 0xd2, 0xcb, 0xa4];
        #[cairofmt::skip]
        let expected_result = array![0x70, 0xd0, 0x82, 0x7f, 0x4d, 0x7c, 0xac, 0x3d, 0x25, 0xba, 0x27, 0x4e, 0x52, 0xcd, 0x19, 0x2c, 0x03, 0x86, 0xc2, 0xcd, 0xc4, 0x4e, 0x60, 0x95, 0x89, 0x11, 0x17, 0xaa, 0xdc, 0xce, 0x9d, 0x53, 0x56, 0xb6, 0xde, 0x1b, 0x74, 0xc8, 0x01, 0x22, 0x99, 0xac];
        let expected_gas = 1404;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_1_6_19() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x23, 0x16, 0x6d, 0x95, 0xd0, 0x5d, 0xf5, 0xd8, 0x98, 0x24, 0x29, 0x17, 0x21, 0x9e, 0x2d, 0x32, 0xf1, 0xe3, 0xe4, 0x26, 0x86, 0x1d, 0xe8, 0xda, 0x56, 0xd8];
        #[cairofmt::skip]
        let expected_result = array![0x55, 0x68, 0x5b, 0x55, 0x7f, 0x83, 0x2f, 0x42, 0xdd, 0x32, 0xe3, 0x6c, 0x61, 0x80, 0xe5, 0x0e, 0x88, 0x1d, 0x2b];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_6_38_22() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x17, 0xb2, 0x20, 0xb9, 0xbe, 0x15, 0x17, 0xb2, 0x20, 0xb9, 0xbe, 0xf2, 0xfb, 0x1c, 0xc7, 0x9c, 0x96, 0x51, 0x82, 0x35, 0x3e, 0x5f, 0x1d, 0x59, 0x62, 0xb4, 0x36, 0x0e, 0x04, 0xde, 0xde, 0x4e, 0x08, 0xef, 0x75, 0x4a, 0xb6, 0xfe, 0x00, 0x01, 0xbf, 0x47, 0x44, 0x3d, 0x38, 0x1a, 0x7b, 0x91, 0x67, 0xf9, 0x84, 0x20, 0x8d, 0x69, 0xb6, 0x94, 0x5a, 0x69, 0x0c, 0xa1, 0x41, 0xe9, 0xe2, 0x62, 0x11, 0xd1];
        #[cairofmt::skip]
        let expected_result = array![0x0e, 0xa3, 0x1f, 0x56, 0x93, 0x15, 0x07, 0xb5, 0xb0, 0xd1, 0xed, 0x2a, 0x3a, 0xbb, 0xca, 0x32, 0x5f, 0x31, 0xe6, 0x9c, 0x66, 0x0d];
        let expected_gas = 900;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_6_22_38() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x15, 0x17, 0xb2, 0x20, 0xb9, 0xbe, 0x08, 0x96, 0x07, 0xe0, 0x3d, 0xcb, 0x20, 0x3a, 0x94, 0x79, 0xb3, 0x5f, 0x6f, 0xd9, 0xdb, 0x48, 0xba, 0x58, 0xd8, 0xb7, 0xcb, 0xd9, 0xda, 0x96, 0x5a, 0xb4, 0x8b, 0xe4, 0xec, 0xb5, 0xe6, 0x1b, 0x69, 0xdb, 0x93, 0x8b, 0xe1, 0xdc, 0xf2, 0xfb, 0x1c, 0xc7, 0x9c, 0x96, 0x51, 0x82, 0x35, 0x3e, 0x5f, 0x1d, 0x59, 0x62, 0xb4, 0x36, 0x0e, 0x04, 0xde, 0xde, 0x4e, 0x08];
        #[cairofmt::skip]
        let expected_result = array![0x4a, 0xdb, 0x78, 0x65, 0x60, 0xad, 0x35, 0xc6, 0x99, 0x07, 0x5a, 0xca, 0x48, 0x61, 0xea, 0x7e, 0xdb, 0xff, 0x12, 0xa7, 0x7f, 0x6c, 0x32, 0xe8, 0x12, 0x00, 0xa8, 0x7b, 0x09, 0xcb, 0x9a, 0xfb, 0x1c, 0xe4, 0xaa, 0x27, 0x2b, 0x28];
        let expected_gas = 1425;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_6_38_38() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x15, 0x17, 0xb2, 0x20, 0xb9, 0xbe, 0x15, 0x17, 0xb2, 0x20, 0xb9, 0xbe, 0xf2, 0xfb, 0x1c, 0xc7, 0x9c, 0x96, 0x51, 0x82, 0x35, 0x3e, 0x5f, 0x1d, 0x59, 0x62, 0xb4, 0x36, 0x0e, 0x04, 0xde, 0xde, 0x4e, 0x08, 0xef, 0x75, 0x4a, 0xb6, 0xfe, 0x00, 0x01, 0xbf, 0x47, 0x44, 0x3d, 0x38, 0x1a, 0x7b, 0x91, 0x67, 0xf9, 0x84, 0x20, 0x8d, 0x69, 0xb6, 0x94, 0x5a, 0x69, 0x0c, 0xa1, 0x41, 0xe9, 0xe2, 0x62, 0x11, 0xd1, 0x2d, 0xe8, 0x11, 0x43, 0xd7, 0x03, 0xc2, 0xe8, 0x5e, 0x12, 0xe0, 0x25, 0xfd, 0x21, 0x78];
        #[cairofmt::skip]
        let expected_result = array![0x3b, 0xdb, 0xbf, 0xde, 0xc5, 0x08, 0xba, 0xee, 0xcb, 0x20, 0x43, 0x85, 0x12, 0x24, 0xd4, 0x46, 0xfb, 0x18, 0x0b, 0x4e, 0xec, 0x7a, 0x09, 0x32, 0x65, 0xe1, 0x5b, 0x58, 0x94, 0xb4, 0xc3, 0x6f, 0x34, 0x7a, 0xbe, 0x7d, 0x03, 0x40];
        let expected_gas = 2500;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_6_22_22() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x3f, 0x15, 0x17, 0xb2, 0x20, 0xb9, 0xbe, 0x15, 0x17, 0xb2, 0x20, 0xb9, 0xbe, 0xf2, 0xfb, 0x1c, 0xc7, 0x9c, 0x96, 0x51, 0x82, 0x35, 0x3e, 0x5f, 0x1d, 0x59, 0x62, 0xb4, 0x36, 0x0e, 0x04, 0xde, 0xde, 0x4e, 0x08, 0xef, 0x75, 0x4a, 0xb6, 0xfe, 0x00, 0x01, 0xbf, 0x47, 0x44, 0x3d, 0x38, 0x1a, 0x7b, 0x91];
        #[cairofmt::skip]
        let expected_result = array![0x1a, 0x01, 0x86, 0x9d, 0x84, 0x9c, 0x26, 0xd9, 0xd0, 0x3f, 0xdd, 0x4b, 0xd8, 0x1b, 0xea, 0x4a, 0xfb, 0x31, 0x0d, 0x72, 0xcb, 0x2a];
        let expected_gas = 525;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_38_32_1() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x6e, 0x6c, 0xfc, 0x1c, 0x0d, 0xf5, 0x60, 0x9d, 0xd8, 0x85, 0xa4, 0x24, 0x57, 0x37, 0xb0, 0x31, 0x6c, 0x56, 0x91, 0x81, 0x01, 0x34, 0x8a, 0x75, 0xda, 0xde, 0x42, 0xdc, 0xe0, 0x52, 0xa3, 0xbd, 0x97, 0xab, 0x1e, 0x52, 0xab, 0x22, 0xf6, 0x97, 0x1d, 0x62, 0x4a, 0x76, 0x64, 0xf3, 0x84, 0x2b, 0xf7, 0x0f, 0x7e, 0x1d, 0x78, 0x75, 0x52, 0xfb, 0x18, 0x5f, 0x35, 0x3f, 0x2c, 0x54, 0x16, 0x76, 0x79, 0x41, 0x9c, 0x1c, 0x7f, 0xd9, 0xfa];
        #[cairofmt::skip]
        let expected_result = array![0x18];
        let expected_gas = 2125;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_32_32_1() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x6e, 0x6c, 0xfc, 0x1c, 0x0d, 0xf5, 0x60, 0x9d, 0xd8, 0x85, 0xa4, 0x24, 0x57, 0x37, 0xb0, 0x31, 0x6c, 0x56, 0x91, 0x81, 0x01, 0x34, 0x8a, 0x75, 0xda, 0xde, 0x42, 0xdc, 0xe0, 0x52, 0xa3, 0xbd, 0x6e, 0x6c, 0xfc, 0x1c, 0x0d, 0xf5, 0x60, 0x9d, 0xd8, 0x85, 0xa4, 0x24, 0x57, 0x37, 0xb0, 0x31, 0x6c, 0x56, 0x91, 0x81, 0x01, 0x34, 0x8a, 0x75, 0xda, 0xde, 0x42, 0xdc, 0xe0, 0x52, 0xa3, 0xbd, 0x79];
        #[cairofmt::skip]
        let expected_result = array![0x17];
        let expected_gas = 1354;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_20_14_12() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xd6, 0x55, 0xf9, 0x52, 0x65, 0x00, 0x17, 0xa8, 0xe1, 0x47, 0x5e, 0x7e, 0xc4, 0xdd, 0x45, 0xca, 0x67, 0x8d, 0xbf, 0x58, 0xd6, 0x55, 0xf9, 0x52, 0x65, 0x00, 0x17, 0xa8, 0xe1, 0x47, 0x5e, 0x7e, 0xc4, 0xdd, 0x45, 0xca, 0x67, 0x8d, 0xbf, 0x58, 0x9b, 0x7e, 0xa8, 0x04, 0x19, 0x7a];
        #[cairofmt::skip]
        let expected_result = array![0x38, 0xff, 0x9d, 0x9c, 0xbd, 0x00, 0xf0, 0x75, 0xa0, 0x63, 0x17, 0x64];
        let expected_gas = 333;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_20_14_20() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x7e, 0xc4, 0xdd, 0x45, 0xca, 0x67, 0x8d, 0xbf, 0x58, 0x9b, 0x7e, 0xa8, 0x04, 0x19, 0x7e, 0xc4, 0xdd, 0x45, 0xca, 0x67, 0x7e, 0xc4, 0xdd, 0x45, 0xca, 0x67, 0x8d, 0xbf, 0x58, 0x9b, 0x7e, 0xa8, 0x04, 0x19, 0x7e, 0xc4, 0xdd, 0x45, 0xca, 0x67, 0xa4, 0xae, 0x0c, 0x19, 0xd5, 0x67, 0x78, 0x12, 0x31, 0xad, 0x60, 0xad, 0x1e, 0x52];
        #[cairofmt::skip]
        let expected_result = array![0x3a, 0xd7, 0xef, 0x63, 0x97, 0x50, 0xe7, 0x9e, 0x69, 0x4a, 0x06, 0xc1, 0xc9, 0x2d, 0xe4, 0x7a, 0xfb, 0x77, 0xe9, 0x2f];
        let expected_gas = 330;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_9_18_1() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe5, 0xd9, 0x30, 0x41, 0x80, 0x99, 0x5d, 0xe2, 0xcf, 0x32, 0xbd, 0xef, 0x74, 0xb4, 0x09, 0xbf, 0x27, 0xa1, 0x7d, 0x29, 0xa5, 0xa7, 0xcb, 0x23, 0x39, 0x63, 0x92, 0x29];
        #[cairofmt::skip]
        let expected_result = array![0x24];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_1_18_1() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xd9, 0x30, 0x41, 0x80, 0x99, 0x5d, 0xe2, 0xcf, 0x32, 0xbd, 0xef, 0x74, 0xb4, 0x09, 0xbf, 0x27, 0xa1, 0x7d, 0xd9, 0x30];
        #[cairofmt::skip]
        let expected_result = array![0x19];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_1_1_1() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xd9, 0x30, 0x41];
        #[cairofmt::skip]
        let expected_result = array![0x01];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_46_10_13() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x90, 0x95, 0xde, 0x35, 0x14, 0x60, 0x89, 0xd3, 0x31, 0xa5, 0xfd, 0xde, 0x73, 0x5a, 0x65, 0x1d, 0xb9, 0x20, 0xf5, 0xd4, 0xd6, 0x5c, 0x23, 0xa6, 0x9c, 0xc1, 0x86, 0x9d, 0xb8, 0xce, 0x6c, 0x8a, 0xcf, 0x27, 0xd3, 0x70, 0xb4, 0x36, 0x22, 0x9f, 0x13, 0x38, 0x0f, 0x3d, 0x40, 0x9e, 0x47, 0x12, 0x9a, 0x16, 0xd4, 0xe5, 0xb1, 0x48, 0x25, 0x7a, 0x39, 0x0c, 0x43, 0x61, 0x08, 0x8b, 0x1b, 0x58, 0xd4, 0x4c, 0xce, 0xda, 0xe2];
        #[cairofmt::skip]
        let expected_result = array![0x36, 0x72, 0x8b, 0x8d, 0xd7, 0x89, 0x60, 0x0f, 0xb0, 0xff, 0x95, 0x65, 0x46];
        let expected_gas = 936;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_46_13_17() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x95, 0xde, 0x35, 0x14, 0x60, 0x89, 0xd3, 0x31, 0xa5, 0xfd, 0xde, 0x73, 0x5a, 0x65, 0x1d, 0xb9, 0x20, 0xf5, 0xd4, 0xd6, 0x5c, 0x23, 0xa6, 0x9c, 0xc1, 0x86, 0x9d, 0xb8, 0xce, 0x6c, 0x8a, 0xcf, 0x27, 0xd3, 0x70, 0xb4, 0x36, 0x22, 0x9f, 0x13, 0x38, 0x0f, 0x3d, 0x40, 0x9e, 0x47, 0x12, 0x9a, 0x16, 0xd4, 0xe5, 0xb1, 0x48, 0x25, 0x7a, 0x39, 0x0c, 0x43, 0x61, 0x08, 0x8b, 0x1b, 0x58, 0xd4, 0x4c, 0xce, 0xda, 0xe2, 0xe0, 0xe8, 0x36, 0xd6, 0x28, 0x14, 0xeb, 0x00];
        #[cairofmt::skip]
        let expected_result = array![0x07, 0xcc, 0x0a, 0x6f, 0xae, 0xfd, 0xcf, 0xc0, 0x7d, 0x9f, 0x7b, 0x09, 0xdd, 0xf1, 0x79, 0xe0, 0x47];
        let expected_gas = 1200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_46_13_13() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x51, 0xd7, 0xcf, 0x6a, 0xe4, 0x0b, 0x0e, 0xb3, 0x0a, 0xc0, 0xd8, 0xff, 0x00, 0x51, 0xd7, 0xcf, 0x6a, 0xe4, 0x0b, 0x0e, 0xb3, 0x0a, 0xc0, 0xd8, 0xff, 0xc4, 0x35, 0x94, 0xdf, 0x10, 0x98, 0x71, 0xe6, 0xa2, 0xd5, 0x13, 0xba, 0x22, 0x44, 0x20, 0xc1, 0x53, 0xda, 0xa6, 0x68, 0xad, 0x46, 0x89, 0xe3, 0x63, 0x6b, 0x0d, 0xff, 0x24, 0x5d, 0x19, 0xe8, 0xf4, 0x0c, 0x42, 0x96, 0xa1, 0xe6, 0x84, 0x16, 0x39, 0x95, 0x6d, 0x60, 0x9e, 0xb4];
        #[cairofmt::skip]
        let expected_result = array![0x0a, 0x2c, 0x96, 0x07, 0x19, 0x76, 0xf4, 0xcd, 0x53, 0xe8, 0x4f, 0xce, 0xe4];
        let expected_gas = 1236;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_11_47_6() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x32, 0x32, 0x4e, 0x06, 0xa1, 0x5f, 0x0e, 0xae, 0x93, 0xeb, 0xfb, 0x32, 0x32, 0x4e, 0x06, 0xa1, 0x5f, 0x0e, 0xae, 0x93, 0xeb, 0xfb, 0xe3, 0x56, 0x3c, 0xab, 0x0c, 0x8e, 0x68, 0xba, 0xc6, 0xf8, 0xcc, 0x26, 0x15, 0x0e, 0xe8, 0x8b, 0x5d, 0x75, 0xba, 0x4d, 0xfb, 0xb1, 0x51, 0x49, 0x7c, 0x36, 0xe7, 0x52, 0x26, 0xb2, 0x10, 0xe8, 0xac, 0x70, 0xb2, 0x98, 0x50, 0x7f, 0x89, 0xd0, 0x23, 0x5f];
        #[cairofmt::skip]
        let expected_result = array![0x4b, 0x3a, 0xd6, 0x71, 0xc9, 0x84];
        let expected_gas = 497;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_11_11_6() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x32, 0x32, 0x4e, 0x06, 0xa1, 0x5f, 0x0e, 0xae, 0x93, 0xeb, 0xfb, 0x32, 0x32, 0x4e, 0x06, 0xa1, 0x5f, 0x0e, 0xae, 0x93, 0xeb, 0xfb, 0xe3, 0x56, 0x3c, 0xab, 0x0c, 0x8e];
        #[cairofmt::skip]
        let expected_result = array![0x96, 0x7e, 0x19, 0x4c, 0x08, 0x6f];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_11_11_11() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x32, 0x32, 0x4e, 0x06, 0xa1, 0x5f, 0x0e, 0xae, 0x93, 0xeb, 0xfb, 0x32, 0x32, 0x4e, 0x06, 0xa1, 0x5f, 0x0e, 0xae, 0x93, 0xeb, 0xfb, 0xe3, 0x56, 0x3c, 0xab, 0x0c, 0x8e, 0xb8, 0x4e, 0xcc, 0xa2, 0xb2];
        #[cairofmt::skip]
        let expected_result = array![0x0c, 0xfc, 0x94, 0x74, 0x42, 0xb2, 0x6e, 0x7d, 0x92, 0x4b, 0x85];
        let expected_gas = 200;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_30_38_41() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x33, 0xf4, 0xe7, 0x17, 0x76, 0x57, 0xd9, 0xf5, 0xec, 0x56, 0xce, 0xf5, 0xa7, 0xe7, 0x50, 0x16, 0xf7, 0x9f, 0xdf, 0xe5, 0x8f, 0xb3, 0xa8, 0x5c, 0x64, 0x0c, 0xda, 0xf5, 0x09, 0x7d, 0x88, 0xea, 0x44, 0xf3, 0x64, 0x58, 0xfb, 0x61, 0x33, 0xf4, 0xe7, 0x17, 0x76, 0x57, 0xd9, 0xf5, 0xec, 0x56, 0xce, 0xf5, 0xa7, 0xe7, 0x50, 0x16, 0xf7, 0x9f, 0xdf, 0xe5, 0x8f, 0xb3, 0xa8, 0x5c, 0x64, 0x0c, 0xda, 0xf5, 0x09, 0x7d, 0x88, 0xea, 0x44, 0xf3, 0x64, 0x58, 0xfb, 0x61, 0x5f, 0xa1, 0xf2, 0x66, 0xdd, 0x70, 0xf4, 0x77, 0x2a, 0x4a, 0xf9, 0xbe, 0x1e, 0x30, 0x62, 0x29, 0xb3, 0xcd, 0xa8, 0xeb, 0x23, 0x05, 0xa4, 0x8b, 0xcd, 0xbd, 0x4a, 0xf9, 0x8f, 0xcf, 0xe4, 0xff, 0x3b];
        #[cairofmt::skip]
        let expected_result = array![0x0d, 0x98, 0x56, 0x71, 0xbe, 0x24, 0x9a, 0x85, 0x59, 0x81, 0xe1, 0x4b, 0x2a, 0xdf, 0xdd, 0xe0, 0x67, 0x8d, 0xed, 0xd1, 0x55, 0x0a, 0xf7, 0x0c, 0xe7, 0x33, 0x36, 0x21, 0x48, 0xfd, 0xd8, 0xea, 0x63, 0x98, 0xdc, 0x79, 0x11, 0x7c, 0xe6, 0x8f, 0x4c];
        let expected_gas = 3636;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }

    #[test]
    fn test_modexp_matching_lengths_30_41_41() {
        #[cairofmt::skip]
        let input = array![0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0xf5, 0xa7, 0xe7, 0x50, 0x16, 0xf7, 0x9f, 0xdf, 0xe5, 0x8f, 0xb3, 0xa8, 0x5c, 0x64, 0x0c, 0xda, 0xf5, 0x09, 0x7d, 0x88, 0xea, 0x44, 0x88, 0xea, 0x44, 0xf3, 0x64, 0x58, 0xfb, 0x61, 0x33, 0xf4, 0xe7, 0x17, 0x76, 0x57, 0xd9, 0xf5, 0xec, 0x56, 0xce, 0xf5, 0xa7, 0xe7, 0x50, 0x16, 0xf7, 0x9f, 0xdf, 0xe5, 0x8f, 0xb3, 0xa8, 0x5c, 0x64, 0x0c, 0xda, 0xf5, 0x09, 0x7d, 0x88, 0xea, 0x44, 0x88, 0xea, 0x44, 0xf3, 0x64, 0x58, 0xfb, 0x61, 0x33, 0xf4, 0xe7, 0x17, 0x76, 0x57, 0xd9, 0xf5, 0xec, 0x56, 0xce, 0xf5, 0xa7, 0xe7, 0x50, 0x16, 0xf7, 0x9f, 0xdf, 0xe5, 0x8f, 0xb3, 0xa8, 0x5c, 0x64, 0x0c, 0xda, 0xf5, 0x09, 0x7d, 0x88, 0xea, 0x44, 0xf3, 0x64, 0x58, 0xfb, 0x61, 0x5f, 0xa1, 0xf2];
        #[cairofmt::skip]
        let expected_result = array![0x00, 0xde, 0x94, 0x08, 0xfe, 0xa4, 0x36, 0x0c, 0x76, 0xdc, 0x2d, 0xb4, 0xfb, 0x16, 0x0f, 0x43, 0x0d, 0x00, 0x27, 0x8d, 0xf0, 0x9e, 0x33, 0xb2, 0x2a, 0xf7, 0x0e, 0x21, 0xe5, 0x04, 0xc2, 0x19, 0xc8, 0xf2, 0xdc, 0x7f, 0x6b, 0x31, 0xe1, 0xc8, 0xbb];
        let expected_gas = 3900;

        let (gas, result) = ModExp::exec(input.span()).unwrap();
        assert_eq!(result, expected_result.span());
        assert_eq!(gas, expected_gas);
    }
}
